/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202510192014
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MemberAuthenticationService MemberAuthentication service
type MemberAuthenticationService service

type MemberAuthenticationAuthSessionLoginPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthSessionReq *UnibeeApiMerchantAuthSessionReq
}

func (r MemberAuthenticationAuthSessionLoginPostRequest) UnibeeApiMerchantAuthSessionReq(unibeeApiMerchantAuthSessionReq UnibeeApiMerchantAuthSessionReq) MemberAuthenticationAuthSessionLoginPostRequest {
	r.unibeeApiMerchantAuthSessionReq = &unibeeApiMerchantAuthSessionReq
	return r
}

func (r MemberAuthenticationAuthSessionLoginPostRequest) Execute() (*MerchantAuthSessionLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSessionLoginPostExecute(r)
}

/*
AuthSessionLoginPost Session Login

Session login

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSessionLoginPostRequest
*/
func (a *MemberAuthenticationService) AuthSessionLoginPost(ctx context.Context) MemberAuthenticationAuthSessionLoginPostRequest {
	return MemberAuthenticationAuthSessionLoginPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSessionLoginPost200Response
func (a *MemberAuthenticationService) AuthSessionLoginPostExecute(r MemberAuthenticationAuthSessionLoginPostRequest) (*MerchantAuthSessionLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSessionLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSessionLoginPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/session_login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthSessionReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthSessionReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthSessionReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoClearTotpPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthClearTotpReq *UnibeeApiMerchantAuthClearTotpReq
}

func (r MemberAuthenticationAuthSsoClearTotpPostRequest) UnibeeApiMerchantAuthClearTotpReq(unibeeApiMerchantAuthClearTotpReq UnibeeApiMerchantAuthClearTotpReq) MemberAuthenticationAuthSsoClearTotpPostRequest {
	r.unibeeApiMerchantAuthClearTotpReq = &unibeeApiMerchantAuthClearTotpReq
	return r
}

func (r MemberAuthenticationAuthSsoClearTotpPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoClearTotpPostExecute(r)
}

/*
AuthSsoClearTotpPost Admin Member Clear Member 2FA Key With ResumeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoClearTotpPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoClearTotpPost(ctx context.Context) MemberAuthenticationAuthSsoClearTotpPostRequest {
	return MemberAuthenticationAuthSsoClearTotpPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MemberAuthenticationService) AuthSsoClearTotpPostExecute(r MemberAuthenticationAuthSsoClearTotpPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoClearTotpPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/clear_totp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthClearTotpReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthClearTotpReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthClearTotpReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoLoginOTPPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthLoginOtpReq *UnibeeApiMerchantAuthLoginOtpReq
}

func (r MemberAuthenticationAuthSsoLoginOTPPostRequest) UnibeeApiMerchantAuthLoginOtpReq(unibeeApiMerchantAuthLoginOtpReq UnibeeApiMerchantAuthLoginOtpReq) MemberAuthenticationAuthSsoLoginOTPPostRequest {
	r.unibeeApiMerchantAuthLoginOtpReq = &unibeeApiMerchantAuthLoginOtpReq
	return r
}

func (r MemberAuthenticationAuthSsoLoginOTPPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoLoginOTPPostExecute(r)
}

/*
AuthSsoLoginOTPPost OTP Login

Send email to member with OTP code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoLoginOTPPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoLoginOTPPost(ctx context.Context) MemberAuthenticationAuthSsoLoginOTPPostRequest {
	return MemberAuthenticationAuthSsoLoginOTPPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MemberAuthenticationService) AuthSsoLoginOTPPostExecute(r MemberAuthenticationAuthSsoLoginOTPPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoLoginOTPPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/loginOTP"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthLoginOtpReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthLoginOtpReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthLoginOtpReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthLoginOtpVerifyReq *UnibeeApiMerchantAuthLoginOtpVerifyReq
}

func (r MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest) UnibeeApiMerchantAuthLoginOtpVerifyReq(unibeeApiMerchantAuthLoginOtpVerifyReq UnibeeApiMerchantAuthLoginOtpVerifyReq) MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest {
	r.unibeeApiMerchantAuthLoginOtpVerifyReq = &unibeeApiMerchantAuthLoginOtpVerifyReq
	return r
}

func (r MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoLoginOTPVerifyPostExecute(r)
}

/*
AuthSsoLoginOTPVerifyPost OTP Login Code Verification

OTP login for member, verify OTP code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoLoginOTPVerifyPost(ctx context.Context) MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest {
	return MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoLoginOTPVerifyPostExecute(r MemberAuthenticationAuthSsoLoginOTPVerifyPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoLoginOTPVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/loginOTPVerify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthLoginOtpVerifyReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthLoginOtpVerifyReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthLoginOtpVerifyReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoLoginPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthLoginReq *UnibeeApiMerchantAuthLoginReq
}

func (r MemberAuthenticationAuthSsoLoginPostRequest) UnibeeApiMerchantAuthLoginReq(unibeeApiMerchantAuthLoginReq UnibeeApiMerchantAuthLoginReq) MemberAuthenticationAuthSsoLoginPostRequest {
	r.unibeeApiMerchantAuthLoginReq = &unibeeApiMerchantAuthLoginReq
	return r
}

func (r MemberAuthenticationAuthSsoLoginPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoLoginPostExecute(r)
}

/*
AuthSsoLoginPost Password Login

Password login

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoLoginPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoLoginPost(ctx context.Context) MemberAuthenticationAuthSsoLoginPostRequest {
	return MemberAuthenticationAuthSsoLoginPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoLoginPostExecute(r MemberAuthenticationAuthSsoLoginPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoLoginPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthLoginReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthLoginReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthLoginReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoOauthGithubGetRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	githubCode *string
}

// Github Code
func (r MemberAuthenticationAuthSsoOauthGithubGetRequest) GithubCode(githubCode string) MemberAuthenticationAuthSsoOauthGithubGetRequest {
	r.githubCode = &githubCode
	return r
}

func (r MemberAuthenticationAuthSsoOauthGithubGetRequest) Execute() (*MerchantAuthSsoOauthGithubGet200Response, *http.Response, error) {
	return r.ApiService.AuthSsoOauthGithubGetExecute(r)
}

/*
AuthSsoOauthGithubGet Get Oauth Github

Merchant Oauth Github

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoOauthGithubGetRequest
*/
func (a *MemberAuthenticationService) AuthSsoOauthGithubGet(ctx context.Context) MemberAuthenticationAuthSsoOauthGithubGetRequest {
	return MemberAuthenticationAuthSsoOauthGithubGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoOauthGithubGet200Response
func (a *MemberAuthenticationService) AuthSsoOauthGithubGetExecute(r MemberAuthenticationAuthSsoOauthGithubGetRequest) (*MerchantAuthSsoOauthGithubGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoOauthGithubGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoOauthGithubGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/oauth/github"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.githubCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "githubCode", r.githubCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoOauthGoogleGetRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	googleCode *string
	redirectUri *string
}

// Google Code
func (r MemberAuthenticationAuthSsoOauthGoogleGetRequest) GoogleCode(googleCode string) MemberAuthenticationAuthSsoOauthGoogleGetRequest {
	r.googleCode = &googleCode
	return r
}

// The Google Redirect Uri
func (r MemberAuthenticationAuthSsoOauthGoogleGetRequest) RedirectUri(redirectUri string) MemberAuthenticationAuthSsoOauthGoogleGetRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r MemberAuthenticationAuthSsoOauthGoogleGetRequest) Execute() (*MerchantAuthSsoOauthGoogleGet200Response, *http.Response, error) {
	return r.ApiService.AuthSsoOauthGoogleGetExecute(r)
}

/*
AuthSsoOauthGoogleGet Get Oauth Google

Merchant Oauth Google

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoOauthGoogleGetRequest
*/
func (a *MemberAuthenticationService) AuthSsoOauthGoogleGet(ctx context.Context) MemberAuthenticationAuthSsoOauthGoogleGetRequest {
	return MemberAuthenticationAuthSsoOauthGoogleGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoOauthGoogleGet200Response
func (a *MemberAuthenticationService) AuthSsoOauthGoogleGetExecute(r MemberAuthenticationAuthSsoOauthGoogleGetRequest) (*MerchantAuthSsoOauthGoogleGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoOauthGoogleGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoOauthGoogleGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/oauth/google"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.googleCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "googleCode", r.googleCode, "")
	}
	if r.redirectUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "redirectUri", r.redirectUri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoOauthLoginPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthLoginOAuthReq *UnibeeApiMerchantAuthLoginOAuthReq
}

func (r MemberAuthenticationAuthSsoOauthLoginPostRequest) UnibeeApiMerchantAuthLoginOAuthReq(unibeeApiMerchantAuthLoginOAuthReq UnibeeApiMerchantAuthLoginOAuthReq) MemberAuthenticationAuthSsoOauthLoginPostRequest {
	r.unibeeApiMerchantAuthLoginOAuthReq = &unibeeApiMerchantAuthLoginOAuthReq
	return r
}

func (r MemberAuthenticationAuthSsoOauthLoginPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoOauthLoginPostExecute(r)
}

/*
AuthSsoOauthLoginPost OAuth Login

OAuth login. Pass OAuth token in request header (Auth.js JWT). Headers: X-Auth-JS-Token | X-Auth-Token | X-OAuth-Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoOauthLoginPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoOauthLoginPost(ctx context.Context) MemberAuthenticationAuthSsoOauthLoginPostRequest {
	return MemberAuthenticationAuthSsoOauthLoginPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoOauthLoginPostExecute(r MemberAuthenticationAuthSsoOauthLoginPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoOauthLoginPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/oauth/login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthLoginOAuthReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthLoginOAuthReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthLoginOAuthReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoOauthMembersGetRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
}

func (r MemberAuthenticationAuthSsoOauthMembersGetRequest) Execute() (*MerchantAuthSsoOauthMembersGet200Response, *http.Response, error) {
	return r.ApiService.AuthSsoOauthMembersGetExecute(r)
}

/*
AuthSsoOauthMembersGet Get Oauth Members

Merchant Get Oauth Connected Members. Pass OAuth token in request header (Auth.js JWT). Headers: X-Auth-JS-Token | X-Auth-Token | X-OAuth-Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoOauthMembersGetRequest
*/
func (a *MemberAuthenticationService) AuthSsoOauthMembersGet(ctx context.Context) MemberAuthenticationAuthSsoOauthMembersGetRequest {
	return MemberAuthenticationAuthSsoOauthMembersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoOauthMembersGet200Response
func (a *MemberAuthenticationService) AuthSsoOauthMembersGetExecute(r MemberAuthenticationAuthSsoOauthMembersGetRequest) (*MerchantAuthSsoOauthMembersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoOauthMembersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoOauthMembersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/oauth/members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoOauthRegisterPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthRegisterOAuthReq *UnibeeApiMerchantAuthRegisterOAuthReq
}

func (r MemberAuthenticationAuthSsoOauthRegisterPostRequest) UnibeeApiMerchantAuthRegisterOAuthReq(unibeeApiMerchantAuthRegisterOAuthReq UnibeeApiMerchantAuthRegisterOAuthReq) MemberAuthenticationAuthSsoOauthRegisterPostRequest {
	r.unibeeApiMerchantAuthRegisterOAuthReq = &unibeeApiMerchantAuthRegisterOAuthReq
	return r
}

func (r MemberAuthenticationAuthSsoOauthRegisterPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoOauthRegisterPostExecute(r)
}

/*
AuthSsoOauthRegisterPost Register OAuth

Merchant OAuth Register. Pass OAuth token in request header (Auth.js JWT). Headers: X-Auth-JS-Token | X-Auth-Token | X-OAuth-Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoOauthRegisterPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoOauthRegisterPost(ctx context.Context) MemberAuthenticationAuthSsoOauthRegisterPostRequest {
	return MemberAuthenticationAuthSsoOauthRegisterPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoOauthRegisterPostExecute(r MemberAuthenticationAuthSsoOauthRegisterPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoOauthRegisterPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/oauth/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthRegisterOAuthReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthRegisterOAuthReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthRegisterOAuthReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoOauthSetupPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthSetupOAuthReq *UnibeeApiMerchantAuthSetupOAuthReq
}

func (r MemberAuthenticationAuthSsoOauthSetupPostRequest) UnibeeApiMerchantAuthSetupOAuthReq(unibeeApiMerchantAuthSetupOAuthReq UnibeeApiMerchantAuthSetupOAuthReq) MemberAuthenticationAuthSsoOauthSetupPostRequest {
	r.unibeeApiMerchantAuthSetupOAuthReq = &unibeeApiMerchantAuthSetupOAuthReq
	return r
}

func (r MemberAuthenticationAuthSsoOauthSetupPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoOauthSetupPostExecute(r)
}

/*
AuthSsoOauthSetupPost OAuth Setup

Member OAuth Setup. Pass OAuth token in request header (Auth.js JWT). Headers: X-Auth-JS-Token | X-Auth-Token | X-OAuth-Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoOauthSetupPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoOauthSetupPost(ctx context.Context) MemberAuthenticationAuthSsoOauthSetupPostRequest {
	return MemberAuthenticationAuthSsoOauthSetupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoOauthSetupPostExecute(r MemberAuthenticationAuthSsoOauthSetupPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoOauthSetupPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/oauth/setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthSetupOAuthReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthSetupOAuthReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthSetupOAuthReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthPasswordForgetOtpReq *UnibeeApiMerchantAuthPasswordForgetOtpReq
}

func (r MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest) UnibeeApiMerchantAuthPasswordForgetOtpReq(unibeeApiMerchantAuthPasswordForgetOtpReq UnibeeApiMerchantAuthPasswordForgetOtpReq) MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest {
	r.unibeeApiMerchantAuthPasswordForgetOtpReq = &unibeeApiMerchantAuthPasswordForgetOtpReq
	return r
}

func (r MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoPasswordForgetOTPPostExecute(r)
}

/*
AuthSsoPasswordForgetOTPPost OTP Password Forget

Send email to member with OTP code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoPasswordForgetOTPPost(ctx context.Context) MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest {
	return MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MemberAuthenticationService) AuthSsoPasswordForgetOTPPostExecute(r MemberAuthenticationAuthSsoPasswordForgetOTPPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoPasswordForgetOTPPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/passwordForgetOTP"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthPasswordForgetOtpReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthPasswordForgetOtpReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthPasswordForgetOtpReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthPasswordForgetOtpVerifyReq *UnibeeApiMerchantAuthPasswordForgetOtpVerifyReq
}

func (r MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest) UnibeeApiMerchantAuthPasswordForgetOtpVerifyReq(unibeeApiMerchantAuthPasswordForgetOtpVerifyReq UnibeeApiMerchantAuthPasswordForgetOtpVerifyReq) MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest {
	r.unibeeApiMerchantAuthPasswordForgetOtpVerifyReq = &unibeeApiMerchantAuthPasswordForgetOtpVerifyReq
	return r
}

func (r MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoPasswordForgetOTPVerifyPostExecute(r)
}

/*
AuthSsoPasswordForgetOTPVerifyPost OTP Password Forget Code Verification

Password forget OTP process, verify OTP code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoPasswordForgetOTPVerifyPost(ctx context.Context) MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest {
	return MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MemberAuthenticationService) AuthSsoPasswordForgetOTPVerifyPostExecute(r MemberAuthenticationAuthSsoPasswordForgetOTPVerifyPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoPasswordForgetOTPVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/passwordForgetOTPVerify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthPasswordForgetOtpVerifyReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthPasswordForgetOtpVerifyReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthPasswordForgetOtpVerifyReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthPasswordForgetTotpVerifyReq *UnibeeApiMerchantAuthPasswordForgetTotpVerifyReq
}

func (r MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest) UnibeeApiMerchantAuthPasswordForgetTotpVerifyReq(unibeeApiMerchantAuthPasswordForgetTotpVerifyReq UnibeeApiMerchantAuthPasswordForgetTotpVerifyReq) MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest {
	r.unibeeApiMerchantAuthPasswordForgetTotpVerifyReq = &unibeeApiMerchantAuthPasswordForgetTotpVerifyReq
	return r
}

func (r MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoPasswordForgetTotpVerifyPostExecute(r)
}

/*
AuthSsoPasswordForgetTotpVerifyPost 2FA Password Forget Code Verification

Password forget 2FA process, verify 2FA code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoPasswordForgetTotpVerifyPost(ctx context.Context) MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest {
	return MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MemberAuthenticationService) AuthSsoPasswordForgetTotpVerifyPostExecute(r MemberAuthenticationAuthSsoPasswordForgetTotpVerifyPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoPasswordForgetTotpVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/passwordForgetTotpVerify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthPasswordForgetTotpVerifyReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthPasswordForgetTotpVerifyReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthPasswordForgetTotpVerifyReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoPasswordSetupPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthPasswordSetupOtpReq *UnibeeApiMerchantAuthPasswordSetupOtpReq
}

func (r MemberAuthenticationAuthSsoPasswordSetupPostRequest) UnibeeApiMerchantAuthPasswordSetupOtpReq(unibeeApiMerchantAuthPasswordSetupOtpReq UnibeeApiMerchantAuthPasswordSetupOtpReq) MemberAuthenticationAuthSsoPasswordSetupPostRequest {
	r.unibeeApiMerchantAuthPasswordSetupOtpReq = &unibeeApiMerchantAuthPasswordSetupOtpReq
	return r
}

func (r MemberAuthenticationAuthSsoPasswordSetupPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoPasswordSetupPostExecute(r)
}

/*
AuthSsoPasswordSetupPost Password Setup

Member Password Setup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoPasswordSetupPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoPasswordSetupPost(ctx context.Context) MemberAuthenticationAuthSsoPasswordSetupPostRequest {
	return MemberAuthenticationAuthSsoPasswordSetupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoPasswordSetupPostExecute(r MemberAuthenticationAuthSsoPasswordSetupPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoPasswordSetupPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/passwordSetup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthPasswordSetupOtpReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthPasswordSetupOtpReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthPasswordSetupOtpReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthRegisterEmailCheckReq *UnibeeApiMerchantAuthRegisterEmailCheckReq
}

func (r MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest) UnibeeApiMerchantAuthRegisterEmailCheckReq(unibeeApiMerchantAuthRegisterEmailCheckReq UnibeeApiMerchantAuthRegisterEmailCheckReq) MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest {
	r.unibeeApiMerchantAuthRegisterEmailCheckReq = &unibeeApiMerchantAuthRegisterEmailCheckReq
	return r
}

func (r MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest) Execute() (*MerchantAuthSsoRegisterEmailCheckPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoRegisterEmailCheckPostExecute(r)
}

/*
AuthSsoRegisterEmailCheckPost Register Email Check

Check Register Email

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoRegisterEmailCheckPost(ctx context.Context) MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest {
	return MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoRegisterEmailCheckPost200Response
func (a *MemberAuthenticationService) AuthSsoRegisterEmailCheckPostExecute(r MemberAuthenticationAuthSsoRegisterEmailCheckPostRequest) (*MerchantAuthSsoRegisterEmailCheckPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoRegisterEmailCheckPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoRegisterEmailCheckPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/register_email_check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthRegisterEmailCheckReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthRegisterEmailCheckReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthRegisterEmailCheckReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoRegisterPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthRegisterReq *UnibeeApiMerchantAuthRegisterReq
}

func (r MemberAuthenticationAuthSsoRegisterPostRequest) UnibeeApiMerchantAuthRegisterReq(unibeeApiMerchantAuthRegisterReq UnibeeApiMerchantAuthRegisterReq) MemberAuthenticationAuthSsoRegisterPostRequest {
	r.unibeeApiMerchantAuthRegisterReq = &unibeeApiMerchantAuthRegisterReq
	return r
}

func (r MemberAuthenticationAuthSsoRegisterPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoRegisterPostExecute(r)
}

/*
AuthSsoRegisterPost Register

Register with owner permission, send email with OTP code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoRegisterPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoRegisterPost(ctx context.Context) MemberAuthenticationAuthSsoRegisterPostRequest {
	return MemberAuthenticationAuthSsoRegisterPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MemberAuthenticationService) AuthSsoRegisterPostExecute(r MemberAuthenticationAuthSsoRegisterPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoRegisterPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthRegisterReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthRegisterReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthRegisterReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberAuthenticationAuthSsoRegisterVerifyPostRequest struct {
	ctx context.Context
	ApiService *MemberAuthenticationService
	unibeeApiMerchantAuthRegisterVerifyReq *UnibeeApiMerchantAuthRegisterVerifyReq
}

func (r MemberAuthenticationAuthSsoRegisterVerifyPostRequest) UnibeeApiMerchantAuthRegisterVerifyReq(unibeeApiMerchantAuthRegisterVerifyReq UnibeeApiMerchantAuthRegisterVerifyReq) MemberAuthenticationAuthSsoRegisterVerifyPostRequest {
	r.unibeeApiMerchantAuthRegisterVerifyReq = &unibeeApiMerchantAuthRegisterVerifyReq
	return r
}

func (r MemberAuthenticationAuthSsoRegisterVerifyPostRequest) Execute() (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	return r.ApiService.AuthSsoRegisterVerifyPostExecute(r)
}

/*
AuthSsoRegisterVerifyPost Register Verify

Merchant Register, verify OTP code 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MemberAuthenticationAuthSsoRegisterVerifyPostRequest
*/
func (a *MemberAuthenticationService) AuthSsoRegisterVerifyPost(ctx context.Context) MemberAuthenticationAuthSsoRegisterVerifyPostRequest {
	return MemberAuthenticationAuthSsoRegisterVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginPost200Response
func (a *MemberAuthenticationService) AuthSsoRegisterVerifyPostExecute(r MemberAuthenticationAuthSsoRegisterVerifyPostRequest) (*MerchantAuthSsoLoginPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberAuthenticationService.AuthSsoRegisterVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/auth/sso/registerVerify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantAuthRegisterVerifyReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantAuthRegisterVerifyReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantAuthRegisterVerifyReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
