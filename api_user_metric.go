/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202502180830
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UserMetricService UserMetric service
type UserMetricService service

type UserMetricMetricEventDeletePostRequest struct {
	ctx context.Context
	ApiService *UserMetricService
	unibeeApiMerchantMetricDeleteEventReq *UnibeeApiMerchantMetricDeleteEventReq
}

func (r UserMetricMetricEventDeletePostRequest) UnibeeApiMerchantMetricDeleteEventReq(unibeeApiMerchantMetricDeleteEventReq UnibeeApiMerchantMetricDeleteEventReq) UserMetricMetricEventDeletePostRequest {
	r.unibeeApiMerchantMetricDeleteEventReq = &unibeeApiMerchantMetricDeleteEventReq
	return r
}

func (r UserMetricMetricEventDeletePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MetricEventDeletePostExecute(r)
}

/*
MetricEventDeletePost Del Merchant Metric Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserMetricMetricEventDeletePostRequest
*/
func (a *UserMetricService) MetricEventDeletePost(ctx context.Context) UserMetricMetricEventDeletePostRequest {
	return UserMetricMetricEventDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *UserMetricService) MetricEventDeletePostExecute(r UserMetricMetricEventDeletePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserMetricService.MetricEventDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricDeleteEventReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricDeleteEventReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricDeleteEventReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserMetricMetricEventListGetRequest struct {
	ctx context.Context
	ApiService *UserMetricService
	userId *int64
	sortField *string
	sortType *string
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// Filter UserId
func (r UserMetricMetricEventListGetRequest) UserId(userId int64) UserMetricMetricEventListGetRequest {
	r.userId = &userId
	return r
}

// Sort，user_id|gmt_create，Default gmt_create
func (r UserMetricMetricEventListGetRequest) SortField(sortField string) UserMetricMetricEventListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r UserMetricMetricEventListGetRequest) SortType(sortType string) UserMetricMetricEventListGetRequest {
	r.sortType = &sortType
	return r
}

// Page,Start 0
func (r UserMetricMetricEventListGetRequest) Page(page int32) UserMetricMetricEventListGetRequest {
	r.page = &page
	return r
}

// Count OF Page
func (r UserMetricMetricEventListGetRequest) Count(count int32) UserMetricMetricEventListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart
func (r UserMetricMetricEventListGetRequest) CreateTimeStart(createTimeStart int64) UserMetricMetricEventListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd
func (r UserMetricMetricEventListGetRequest) CreateTimeEnd(createTimeEnd int64) UserMetricMetricEventListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r UserMetricMetricEventListGetRequest) Execute() (*MerchantMetricEventListGet200Response, *http.Response, error) {
	return r.ApiService.MetricEventListGetExecute(r)
}

/*
MetricEventListGet User Metric Event List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserMetricMetricEventListGetRequest
*/
func (a *UserMetricService) MetricEventListGet(ctx context.Context) UserMetricMetricEventListGetRequest {
	return UserMetricMetricEventListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventListGet200Response
func (a *UserMetricService) MetricEventListGetExecute(r UserMetricMetricEventListGetRequest) (*MerchantMetricEventListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserMetricService.MetricEventListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserMetricMetricEventListPostRequest struct {
	ctx context.Context
	ApiService *UserMetricService
	unibeeApiMerchantMetricEventListReq *UnibeeApiMerchantMetricEventListReq
}

func (r UserMetricMetricEventListPostRequest) UnibeeApiMerchantMetricEventListReq(unibeeApiMerchantMetricEventListReq UnibeeApiMerchantMetricEventListReq) UserMetricMetricEventListPostRequest {
	r.unibeeApiMerchantMetricEventListReq = &unibeeApiMerchantMetricEventListReq
	return r
}

func (r UserMetricMetricEventListPostRequest) Execute() (*MerchantMetricEventListGet200Response, *http.Response, error) {
	return r.ApiService.MetricEventListPostExecute(r)
}

/*
MetricEventListPost User Metric Event List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserMetricMetricEventListPostRequest
*/
func (a *UserMetricService) MetricEventListPost(ctx context.Context) UserMetricMetricEventListPostRequest {
	return UserMetricMetricEventListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventListGet200Response
func (a *UserMetricService) MetricEventListPostExecute(r UserMetricMetricEventListPostRequest) (*MerchantMetricEventListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserMetricService.MetricEventListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricEventListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricEventListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricEventListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserMetricMetricEventNewPostRequest struct {
	ctx context.Context
	ApiService *UserMetricService
	unibeeApiMerchantMetricNewEventReq *UnibeeApiMerchantMetricNewEventReq
}

func (r UserMetricMetricEventNewPostRequest) UnibeeApiMerchantMetricNewEventReq(unibeeApiMerchantMetricNewEventReq UnibeeApiMerchantMetricNewEventReq) UserMetricMetricEventNewPostRequest {
	r.unibeeApiMerchantMetricNewEventReq = &unibeeApiMerchantMetricNewEventReq
	return r
}

func (r UserMetricMetricEventNewPostRequest) Execute() (*MerchantMetricEventNewPost200Response, *http.Response, error) {
	return r.ApiService.MetricEventNewPostExecute(r)
}

/*
MetricEventNewPost New Merchant Metric Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserMetricMetricEventNewPostRequest
*/
func (a *UserMetricService) MetricEventNewPost(ctx context.Context) UserMetricMetricEventNewPostRequest {
	return UserMetricMetricEventNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventNewPost200Response
func (a *UserMetricService) MetricEventNewPostExecute(r UserMetricMetricEventNewPostRequest) (*MerchantMetricEventNewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventNewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserMetricService.MetricEventNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricNewEventReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricNewEventReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricNewEventReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserMetricMetricUserMetricGetRequest struct {
	ctx context.Context
	ApiService *UserMetricService
	userId *int64
	externalUserId *string
	productId *int64
}

// UserId, One Of UserId|ExternalUserId Needed
func (r UserMetricMetricUserMetricGetRequest) UserId(userId int64) UserMetricMetricUserMetricGetRequest {
	r.userId = &userId
	return r
}

// ExternalUserId, One Of UserId|ExternalUserId Needed
func (r UserMetricMetricUserMetricGetRequest) ExternalUserId(externalUserId string) UserMetricMetricUserMetricGetRequest {
	r.externalUserId = &externalUserId
	return r
}

// default product will use if productId not specified and subscriptionId is blank
func (r UserMetricMetricUserMetricGetRequest) ProductId(productId int64) UserMetricMetricUserMetricGetRequest {
	r.productId = &productId
	return r
}

func (r UserMetricMetricUserMetricGetRequest) Execute() (*MerchantMetricUserMetricGet200Response, *http.Response, error) {
	return r.ApiService.MetricUserMetricGetExecute(r)
}

/*
MetricUserMetricGet Query User Metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserMetricMetricUserMetricGetRequest
*/
func (a *UserMetricService) MetricUserMetricGet(ctx context.Context) UserMetricMetricUserMetricGetRequest {
	return UserMetricMetricUserMetricGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricUserMetricGet200Response
func (a *UserMetricService) MetricUserMetricGetExecute(r UserMetricMetricUserMetricGetRequest) (*MerchantMetricUserMetricGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricUserMetricGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserMetricService.MetricUserMetricGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/user/metric"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.externalUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalUserId", r.externalUserId, "")
	}
	if r.productId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productId", r.productId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
