/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202502100408
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// AdminMemberService AdminMember service
type AdminMemberService service

type AdminMemberMemberListGetRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	roleIds *[]int64
	page *int32
	count *int32
}

// The member roleId if specified&#39;
func (r AdminMemberMemberListGetRequest) RoleIds(roleIds []int64) AdminMemberMemberListGetRequest {
	r.roleIds = &roleIds
	return r
}

// Page, Start With 0
func (r AdminMemberMemberListGetRequest) Page(page int32) AdminMemberMemberListGetRequest {
	r.page = &page
	return r
}

// Count Of Page
func (r AdminMemberMemberListGetRequest) Count(count int32) AdminMemberMemberListGetRequest {
	r.count = &count
	return r
}

func (r AdminMemberMemberListGetRequest) Execute() (*MerchantMemberListGet200Response, *http.Response, error) {
	return r.ApiService.MemberListGetExecute(r)
}

/*
MemberListGet Get Member List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberListGetRequest
*/
func (a *AdminMemberService) MemberListGet(ctx context.Context) AdminMemberMemberListGetRequest {
	return AdminMemberMemberListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMemberListGet200Response
func (a *AdminMemberService) MemberListGetExecute(r AdminMemberMemberListGetRequest) (*MerchantMemberListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMemberListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.roleIds != nil {
		t := *r.roleIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roleIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roleIds", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberListPostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	unibeeApiMerchantMemberListReq *UnibeeApiMerchantMemberListReq
}

func (r AdminMemberMemberListPostRequest) UnibeeApiMerchantMemberListReq(unibeeApiMerchantMemberListReq UnibeeApiMerchantMemberListReq) AdminMemberMemberListPostRequest {
	r.unibeeApiMerchantMemberListReq = &unibeeApiMerchantMemberListReq
	return r
}

func (r AdminMemberMemberListPostRequest) Execute() (*MerchantMemberListGet200Response, *http.Response, error) {
	return r.ApiService.MemberListPostExecute(r)
}

/*
MemberListPost Get Member List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberListPostRequest
*/
func (a *AdminMemberService) MemberListPost(ctx context.Context) AdminMemberMemberListPostRequest {
	return AdminMemberMemberListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMemberListGet200Response
func (a *AdminMemberService) MemberListPostExecute(r AdminMemberMemberListPostRequest) (*MerchantMemberListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMemberListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMemberListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMemberListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMemberListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberLogoutPostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	body *map[string]interface{}
}

func (r AdminMemberMemberLogoutPostRequest) Body(body map[string]interface{}) AdminMemberMemberLogoutPostRequest {
	r.body = &body
	return r
}

func (r AdminMemberMemberLogoutPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MemberLogoutPostExecute(r)
}

/*
MemberLogoutPost Logout

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberLogoutPostRequest
*/
func (a *AdminMemberService) MemberLogoutPost(ctx context.Context) AdminMemberMemberLogoutPostRequest {
	return AdminMemberMemberLogoutPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *AdminMemberService) MemberLogoutPostExecute(r AdminMemberMemberLogoutPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberLogoutPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/logout"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberNewMemberPostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	unibeeApiMerchantMemberNewMemberReq *UnibeeApiMerchantMemberNewMemberReq
}

func (r AdminMemberMemberNewMemberPostRequest) UnibeeApiMerchantMemberNewMemberReq(unibeeApiMerchantMemberNewMemberReq UnibeeApiMerchantMemberNewMemberReq) AdminMemberMemberNewMemberPostRequest {
	r.unibeeApiMerchantMemberNewMemberReq = &unibeeApiMerchantMemberNewMemberReq
	return r
}

func (r AdminMemberMemberNewMemberPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MemberNewMemberPostExecute(r)
}

/*
MemberNewMemberPost Invite member

Will send email to member email provided, member can enter admin portal by email otp login

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberNewMemberPostRequest
*/
func (a *AdminMemberService) MemberNewMemberPost(ctx context.Context) AdminMemberMemberNewMemberPostRequest {
	return AdminMemberMemberNewMemberPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *AdminMemberService) MemberNewMemberPostExecute(r AdminMemberMemberNewMemberPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberNewMemberPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/new_member"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMemberNewMemberReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMemberNewMemberReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMemberNewMemberReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberOperationLogListGetRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	memberFirstName *string
	memberLastName *string
	memberEmail *string
	firstName *string
	lastName *string
	email *string
	subscriptionId *string
	invoiceId *string
	planId *int64
	discountCode *string
	page *int32
	count *int32
}

// Filter Member&#39;s FirstName Default All
func (r AdminMemberMemberOperationLogListGetRequest) MemberFirstName(memberFirstName string) AdminMemberMemberOperationLogListGetRequest {
	r.memberFirstName = &memberFirstName
	return r
}

// Filter Member&#39;s LastName, Default All
func (r AdminMemberMemberOperationLogListGetRequest) MemberLastName(memberLastName string) AdminMemberMemberOperationLogListGetRequest {
	r.memberLastName = &memberLastName
	return r
}

// Filter Member&#39;s Email, Default All
func (r AdminMemberMemberOperationLogListGetRequest) MemberEmail(memberEmail string) AdminMemberMemberOperationLogListGetRequest {
	r.memberEmail = &memberEmail
	return r
}

// FirstName
func (r AdminMemberMemberOperationLogListGetRequest) FirstName(firstName string) AdminMemberMemberOperationLogListGetRequest {
	r.firstName = &firstName
	return r
}

// LastName
func (r AdminMemberMemberOperationLogListGetRequest) LastName(lastName string) AdminMemberMemberOperationLogListGetRequest {
	r.lastName = &lastName
	return r
}

// Email
func (r AdminMemberMemberOperationLogListGetRequest) Email(email string) AdminMemberMemberOperationLogListGetRequest {
	r.email = &email
	return r
}

// subscription_id
func (r AdminMemberMemberOperationLogListGetRequest) SubscriptionId(subscriptionId string) AdminMemberMemberOperationLogListGetRequest {
	r.subscriptionId = &subscriptionId
	return r
}

// invoice id
func (r AdminMemberMemberOperationLogListGetRequest) InvoiceId(invoiceId string) AdminMemberMemberOperationLogListGetRequest {
	r.invoiceId = &invoiceId
	return r
}

// plan id
func (r AdminMemberMemberOperationLogListGetRequest) PlanId(planId int64) AdminMemberMemberOperationLogListGetRequest {
	r.planId = &planId
	return r
}

// discount_code
func (r AdminMemberMemberOperationLogListGetRequest) DiscountCode(discountCode string) AdminMemberMemberOperationLogListGetRequest {
	r.discountCode = &discountCode
	return r
}

// Page, Start With 0
func (r AdminMemberMemberOperationLogListGetRequest) Page(page int32) AdminMemberMemberOperationLogListGetRequest {
	r.page = &page
	return r
}

// Count Of Page
func (r AdminMemberMemberOperationLogListGetRequest) Count(count int32) AdminMemberMemberOperationLogListGetRequest {
	r.count = &count
	return r
}

func (r AdminMemberMemberOperationLogListGetRequest) Execute() (*MerchantMemberOperationLogListGet200Response, *http.Response, error) {
	return r.ApiService.MemberOperationLogListGetExecute(r)
}

/*
MemberOperationLogListGet Get Member Operation Log List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberOperationLogListGetRequest
*/
func (a *AdminMemberService) MemberOperationLogListGet(ctx context.Context) AdminMemberMemberOperationLogListGetRequest {
	return AdminMemberMemberOperationLogListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMemberOperationLogListGet200Response
func (a *AdminMemberService) MemberOperationLogListGetExecute(r AdminMemberMemberOperationLogListGetRequest) (*MerchantMemberOperationLogListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMemberOperationLogListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberOperationLogListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/operation_log_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.memberFirstName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memberFirstName", r.memberFirstName, "")
	}
	if r.memberLastName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memberLastName", r.memberLastName, "")
	}
	if r.memberEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memberEmail", r.memberEmail, "")
	}
	if r.firstName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstName", r.firstName, "")
	}
	if r.lastName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastName", r.lastName, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "")
	}
	if r.invoiceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invoiceId", r.invoiceId, "")
	}
	if r.planId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "planId", r.planId, "")
	}
	if r.discountCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discountCode", r.discountCode, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberPasswordResetPostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	unibeeApiMerchantMemberPasswordResetReq *UnibeeApiMerchantMemberPasswordResetReq
}

func (r AdminMemberMemberPasswordResetPostRequest) UnibeeApiMerchantMemberPasswordResetReq(unibeeApiMerchantMemberPasswordResetReq UnibeeApiMerchantMemberPasswordResetReq) AdminMemberMemberPasswordResetPostRequest {
	r.unibeeApiMerchantMemberPasswordResetReq = &unibeeApiMerchantMemberPasswordResetReq
	return r
}

func (r AdminMemberMemberPasswordResetPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MemberPasswordResetPostExecute(r)
}

/*
MemberPasswordResetPost Member Reset Password

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberPasswordResetPostRequest
*/
func (a *AdminMemberService) MemberPasswordResetPost(ctx context.Context) AdminMemberMemberPasswordResetPostRequest {
	return AdminMemberMemberPasswordResetPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *AdminMemberService) MemberPasswordResetPostExecute(r AdminMemberMemberPasswordResetPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberPasswordResetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/passwordReset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMemberPasswordResetReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMemberPasswordResetReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMemberPasswordResetReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberProfileGetRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
}

func (r AdminMemberMemberProfileGetRequest) Execute() (*MerchantAuthSsoRegisterVerifyPost200Response, *http.Response, error) {
	return r.ApiService.MemberProfileGetExecute(r)
}

/*
MemberProfileGet Get Member Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberProfileGetRequest
*/
func (a *AdminMemberService) MemberProfileGet(ctx context.Context) AdminMemberMemberProfileGetRequest {
	return AdminMemberMemberProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoRegisterVerifyPost200Response
func (a *AdminMemberService) MemberProfileGetExecute(r AdminMemberMemberProfileGetRequest) (*MerchantAuthSsoRegisterVerifyPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoRegisterVerifyPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberResumeMemberPostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	unibeeApiMerchantMemberReleaseReq *UnibeeApiMerchantMemberReleaseReq
}

func (r AdminMemberMemberResumeMemberPostRequest) UnibeeApiMerchantMemberReleaseReq(unibeeApiMerchantMemberReleaseReq UnibeeApiMerchantMemberReleaseReq) AdminMemberMemberResumeMemberPostRequest {
	r.unibeeApiMerchantMemberReleaseReq = &unibeeApiMerchantMemberReleaseReq
	return r
}

func (r AdminMemberMemberResumeMemberPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MemberResumeMemberPostExecute(r)
}

/*
MemberResumeMemberPost Resume Member

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberResumeMemberPostRequest
*/
func (a *AdminMemberService) MemberResumeMemberPost(ctx context.Context) AdminMemberMemberResumeMemberPostRequest {
	return AdminMemberMemberResumeMemberPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *AdminMemberService) MemberResumeMemberPostExecute(r AdminMemberMemberResumeMemberPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberResumeMemberPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/resume_member"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMemberReleaseReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMemberReleaseReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMemberReleaseReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberSuspendMemberPostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	unibeeApiMerchantMemberFrozenReq *UnibeeApiMerchantMemberFrozenReq
}

func (r AdminMemberMemberSuspendMemberPostRequest) UnibeeApiMerchantMemberFrozenReq(unibeeApiMerchantMemberFrozenReq UnibeeApiMerchantMemberFrozenReq) AdminMemberMemberSuspendMemberPostRequest {
	r.unibeeApiMerchantMemberFrozenReq = &unibeeApiMerchantMemberFrozenReq
	return r
}

func (r AdminMemberMemberSuspendMemberPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MemberSuspendMemberPostExecute(r)
}

/*
MemberSuspendMemberPost Suspend Member

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberSuspendMemberPostRequest
*/
func (a *AdminMemberService) MemberSuspendMemberPost(ctx context.Context) AdminMemberMemberSuspendMemberPostRequest {
	return AdminMemberMemberSuspendMemberPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *AdminMemberService) MemberSuspendMemberPostExecute(r AdminMemberMemberSuspendMemberPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberSuspendMemberPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/suspend_member"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMemberFrozenReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMemberFrozenReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMemberFrozenReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminMemberMemberUpdateMemberRolePostRequest struct {
	ctx context.Context
	ApiService *AdminMemberService
	unibeeApiMerchantMemberUpdateMemberRoleReq *UnibeeApiMerchantMemberUpdateMemberRoleReq
}

func (r AdminMemberMemberUpdateMemberRolePostRequest) UnibeeApiMerchantMemberUpdateMemberRoleReq(unibeeApiMerchantMemberUpdateMemberRoleReq UnibeeApiMerchantMemberUpdateMemberRoleReq) AdminMemberMemberUpdateMemberRolePostRequest {
	r.unibeeApiMerchantMemberUpdateMemberRoleReq = &unibeeApiMerchantMemberUpdateMemberRoleReq
	return r
}

func (r AdminMemberMemberUpdateMemberRolePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MemberUpdateMemberRolePostExecute(r)
}

/*
MemberUpdateMemberRolePost Update Member Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AdminMemberMemberUpdateMemberRolePostRequest
*/
func (a *AdminMemberService) MemberUpdateMemberRolePost(ctx context.Context) AdminMemberMemberUpdateMemberRolePostRequest {
	return AdminMemberMemberUpdateMemberRolePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *AdminMemberService) MemberUpdateMemberRolePostExecute(r AdminMemberMemberUpdateMemberRolePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminMemberService.MemberUpdateMemberRolePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/member/update_member_role"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMemberUpdateMemberRoleReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMemberUpdateMemberRoleReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMemberUpdateMemberRoleReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
