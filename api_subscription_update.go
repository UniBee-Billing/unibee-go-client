/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202509290914
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SubscriptionUpdateService SubscriptionUpdate service
type SubscriptionUpdateService service

type SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	unibeeApiMerchantSubscriptionActiveTemporarilyReq *UnibeeApiMerchantSubscriptionActiveTemporarilyReq
}

func (r SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest) UnibeeApiMerchantSubscriptionActiveTemporarilyReq(unibeeApiMerchantSubscriptionActiveTemporarilyReq UnibeeApiMerchantSubscriptionActiveTemporarilyReq) SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest {
	r.unibeeApiMerchantSubscriptionActiveTemporarilyReq = &unibeeApiMerchantSubscriptionActiveTemporarilyReq
	return r
}

func (r SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionActiveTemporarilyPostExecute(r)
}

/*
SubscriptionActiveTemporarilyPost Subscription Active Temporarily

Subscription active temporarily, status will transmit from pending to incomplete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest
*/
func (a *SubscriptionUpdateService) SubscriptionActiveTemporarilyPost(ctx context.Context) SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest {
	return SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *SubscriptionUpdateService) SubscriptionActiveTemporarilyPostExecute(r SubscriptionUpdateSubscriptionActiveTemporarilyPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionActiveTemporarilyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/active_temporarily"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionActiveTemporarilyReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionActiveTemporarilyReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionActiveTemporarilyReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	subscriptionPendingUpdateId *string
}

// SubscriptionPendingUpdateId
func (r SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest) SubscriptionPendingUpdateId(subscriptionPendingUpdateId string) SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest {
	r.subscriptionPendingUpdateId = &subscriptionPendingUpdateId
	return r
}

func (r SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest) Execute() (*MerchantSubscriptionPendingUpdateDetailGet200Response, *http.Response, error) {
	return r.ApiService.SubscriptionPendingUpdateDetailGetExecute(r)
}

/*
SubscriptionPendingUpdateDetailGet Subscription Pending Update Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest
*/
func (a *SubscriptionUpdateService) SubscriptionPendingUpdateDetailGet(ctx context.Context) SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest {
	return SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionPendingUpdateDetailGet200Response
func (a *SubscriptionUpdateService) SubscriptionPendingUpdateDetailGetExecute(r SubscriptionUpdateSubscriptionPendingUpdateDetailGetRequest) (*MerchantSubscriptionPendingUpdateDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionPendingUpdateDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionPendingUpdateDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/pending_update_detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionPendingUpdateId == nil {
		return localVarReturnValue, nil, reportError("subscriptionPendingUpdateId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionPendingUpdateId", r.subscriptionPendingUpdateId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionUpdateSubscriptionPendingUpdateListGetRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	subscriptionId *string
	sortField *string
	sortType *string
	page *int32
	count *int32
}

// SubscriptionId
func (r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) SubscriptionId(subscriptionId string) SubscriptionUpdateSubscriptionPendingUpdateListGetRequest {
	r.subscriptionId = &subscriptionId
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) SortField(sortField string) SubscriptionUpdateSubscriptionPendingUpdateListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) SortType(sortType string) SubscriptionUpdateSubscriptionPendingUpdateListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start With 0
func (r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) Page(page int32) SubscriptionUpdateSubscriptionPendingUpdateListGetRequest {
	r.page = &page
	return r
}

// Count Of Page
func (r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) Count(count int32) SubscriptionUpdateSubscriptionPendingUpdateListGetRequest {
	r.count = &count
	return r
}

func (r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) Execute() (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	return r.ApiService.SubscriptionPendingUpdateListGetExecute(r)
}

/*
SubscriptionPendingUpdateListGet Get Subscription Pending Update List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionPendingUpdateListGetRequest
*/
func (a *SubscriptionUpdateService) SubscriptionPendingUpdateListGet(ctx context.Context) SubscriptionUpdateSubscriptionPendingUpdateListGetRequest {
	return SubscriptionUpdateSubscriptionPendingUpdateListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionPendingUpdateListGet200Response
func (a *SubscriptionUpdateService) SubscriptionPendingUpdateListGetExecute(r SubscriptionUpdateSubscriptionPendingUpdateListGetRequest) (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionPendingUpdateListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionPendingUpdateListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/pending_update_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionId == nil {
		return localVarReturnValue, nil, reportError("subscriptionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "")
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionUpdateSubscriptionPendingUpdateListPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	unibeeApiMerchantSubscriptionPendingUpdateListReq *UnibeeApiMerchantSubscriptionPendingUpdateListReq
}

func (r SubscriptionUpdateSubscriptionPendingUpdateListPostRequest) UnibeeApiMerchantSubscriptionPendingUpdateListReq(unibeeApiMerchantSubscriptionPendingUpdateListReq UnibeeApiMerchantSubscriptionPendingUpdateListReq) SubscriptionUpdateSubscriptionPendingUpdateListPostRequest {
	r.unibeeApiMerchantSubscriptionPendingUpdateListReq = &unibeeApiMerchantSubscriptionPendingUpdateListReq
	return r
}

func (r SubscriptionUpdateSubscriptionPendingUpdateListPostRequest) Execute() (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	return r.ApiService.SubscriptionPendingUpdateListPostExecute(r)
}

/*
SubscriptionPendingUpdateListPost Get Subscription Pending Update List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionPendingUpdateListPostRequest
*/
func (a *SubscriptionUpdateService) SubscriptionPendingUpdateListPost(ctx context.Context) SubscriptionUpdateSubscriptionPendingUpdateListPostRequest {
	return SubscriptionUpdateSubscriptionPendingUpdateListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionPendingUpdateListGet200Response
func (a *SubscriptionUpdateService) SubscriptionPendingUpdateListPostExecute(r SubscriptionUpdateSubscriptionPendingUpdateListPostRequest) (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionPendingUpdateListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionPendingUpdateListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/pending_update_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionPendingUpdateListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionPendingUpdateListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionPendingUpdateListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionUpdateSubscriptionRenewPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	unibeeApiMerchantSubscriptionRenewReq *UnibeeApiMerchantSubscriptionRenewReq
}

func (r SubscriptionUpdateSubscriptionRenewPostRequest) UnibeeApiMerchantSubscriptionRenewReq(unibeeApiMerchantSubscriptionRenewReq UnibeeApiMerchantSubscriptionRenewReq) SubscriptionUpdateSubscriptionRenewPostRequest {
	r.unibeeApiMerchantSubscriptionRenewReq = &unibeeApiMerchantSubscriptionRenewReq
	return r
}

func (r SubscriptionUpdateSubscriptionRenewPostRequest) Execute() (*MerchantSubscriptionRenewPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionRenewPostExecute(r)
}

/*
SubscriptionRenewPost Renew Subscription

renew an exist subscription 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionRenewPostRequest
*/
func (a *SubscriptionUpdateService) SubscriptionRenewPost(ctx context.Context) SubscriptionUpdateSubscriptionRenewPostRequest {
	return SubscriptionUpdateSubscriptionRenewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionRenewPost200Response
func (a *SubscriptionUpdateService) SubscriptionRenewPostExecute(r SubscriptionUpdateSubscriptionRenewPostRequest) (*MerchantSubscriptionRenewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionRenewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionRenewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/renew"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionRenewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionRenewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionRenewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionUpdateSubscriptionUpdatePreviewPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	unibeeApiMerchantSubscriptionUpdatePreviewReq *UnibeeApiMerchantSubscriptionUpdatePreviewReq
}

func (r SubscriptionUpdateSubscriptionUpdatePreviewPostRequest) UnibeeApiMerchantSubscriptionUpdatePreviewReq(unibeeApiMerchantSubscriptionUpdatePreviewReq UnibeeApiMerchantSubscriptionUpdatePreviewReq) SubscriptionUpdateSubscriptionUpdatePreviewPostRequest {
	r.unibeeApiMerchantSubscriptionUpdatePreviewReq = &unibeeApiMerchantSubscriptionUpdatePreviewReq
	return r
}

func (r SubscriptionUpdateSubscriptionUpdatePreviewPostRequest) Execute() (*MerchantSubscriptionUpdatePreviewPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionUpdatePreviewPostExecute(r)
}

/*
SubscriptionUpdatePreviewPost Update Subscription Preview

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionUpdatePreviewPostRequest
*/
func (a *SubscriptionUpdateService) SubscriptionUpdatePreviewPost(ctx context.Context) SubscriptionUpdateSubscriptionUpdatePreviewPostRequest {
	return SubscriptionUpdateSubscriptionUpdatePreviewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionUpdatePreviewPost200Response
func (a *SubscriptionUpdateService) SubscriptionUpdatePreviewPostExecute(r SubscriptionUpdateSubscriptionUpdatePreviewPostRequest) (*MerchantSubscriptionUpdatePreviewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionUpdatePreviewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionUpdatePreviewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/update_preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionUpdatePreviewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionUpdatePreviewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionUpdatePreviewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionUpdateSubscriptionUpdateSubmitPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionUpdateService
	unibeeApiMerchantSubscriptionUpdateReq *UnibeeApiMerchantSubscriptionUpdateReq
}

func (r SubscriptionUpdateSubscriptionUpdateSubmitPostRequest) UnibeeApiMerchantSubscriptionUpdateReq(unibeeApiMerchantSubscriptionUpdateReq UnibeeApiMerchantSubscriptionUpdateReq) SubscriptionUpdateSubscriptionUpdateSubmitPostRequest {
	r.unibeeApiMerchantSubscriptionUpdateReq = &unibeeApiMerchantSubscriptionUpdateReq
	return r
}

func (r SubscriptionUpdateSubscriptionUpdateSubmitPostRequest) Execute() (*MerchantSubscriptionUpdateSubmitPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionUpdateSubmitPostExecute(r)
}

/*
SubscriptionUpdateSubmitPost Update Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionUpdateSubscriptionUpdateSubmitPostRequest
*/
func (a *SubscriptionUpdateService) SubscriptionUpdateSubmitPost(ctx context.Context) SubscriptionUpdateSubscriptionUpdateSubmitPostRequest {
	return SubscriptionUpdateSubscriptionUpdateSubmitPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionUpdateSubmitPost200Response
func (a *SubscriptionUpdateService) SubscriptionUpdateSubmitPostExecute(r SubscriptionUpdateSubscriptionUpdateSubmitPostRequest) (*MerchantSubscriptionUpdateSubmitPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionUpdateSubmitPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionUpdateService.SubscriptionUpdateSubmitPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/update_submit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionUpdateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionUpdateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionUpdateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
