/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202506261206
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CheckoutSetupService CheckoutSetup service
type CheckoutSetupService service

type CheckoutSetupCheckoutArchivePostRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	unibeeApiMerchantCheckoutArchiveReq *UnibeeApiMerchantCheckoutArchiveReq
}

func (r CheckoutSetupCheckoutArchivePostRequest) UnibeeApiMerchantCheckoutArchiveReq(unibeeApiMerchantCheckoutArchiveReq UnibeeApiMerchantCheckoutArchiveReq) CheckoutSetupCheckoutArchivePostRequest {
	r.unibeeApiMerchantCheckoutArchiveReq = &unibeeApiMerchantCheckoutArchiveReq
	return r
}

func (r CheckoutSetupCheckoutArchivePostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.CheckoutArchivePostExecute(r)
}

/*
CheckoutArchivePost Archive Merchant Checkout

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutArchivePostRequest
*/
func (a *CheckoutSetupService) CheckoutArchivePost(ctx context.Context) CheckoutSetupCheckoutArchivePostRequest {
	return CheckoutSetupCheckoutArchivePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *CheckoutSetupService) CheckoutArchivePostExecute(r CheckoutSetupCheckoutArchivePostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutArchivePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCheckoutArchiveReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCheckoutArchiveReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCheckoutArchiveReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutDetailGetRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	checkoutId *int64
}

// checkout id
func (r CheckoutSetupCheckoutDetailGetRequest) CheckoutId(checkoutId int64) CheckoutSetupCheckoutDetailGetRequest {
	r.checkoutId = &checkoutId
	return r
}

func (r CheckoutSetupCheckoutDetailGetRequest) Execute() (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutDetailGetExecute(r)
}

/*
CheckoutDetailGet Get Merchant Checkout Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutDetailGetRequest
*/
func (a *CheckoutSetupService) CheckoutDetailGet(ctx context.Context) CheckoutSetupCheckoutDetailGetRequest {
	return CheckoutSetupCheckoutDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutDetailGet200Response
func (a *CheckoutSetupService) CheckoutDetailGetExecute(r CheckoutSetupCheckoutDetailGetRequest) (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.checkoutId == nil {
		return localVarReturnValue, nil, reportError("checkoutId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "checkoutId", r.checkoutId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutDetailPostRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	unibeeApiMerchantCheckoutDetailReq *UnibeeApiMerchantCheckoutDetailReq
}

func (r CheckoutSetupCheckoutDetailPostRequest) UnibeeApiMerchantCheckoutDetailReq(unibeeApiMerchantCheckoutDetailReq UnibeeApiMerchantCheckoutDetailReq) CheckoutSetupCheckoutDetailPostRequest {
	r.unibeeApiMerchantCheckoutDetailReq = &unibeeApiMerchantCheckoutDetailReq
	return r
}

func (r CheckoutSetupCheckoutDetailPostRequest) Execute() (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutDetailPostExecute(r)
}

/*
CheckoutDetailPost Get Merchant Checkout Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutDetailPostRequest
*/
func (a *CheckoutSetupService) CheckoutDetailPost(ctx context.Context) CheckoutSetupCheckoutDetailPostRequest {
	return CheckoutSetupCheckoutDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutDetailGet200Response
func (a *CheckoutSetupService) CheckoutDetailPostExecute(r CheckoutSetupCheckoutDetailPostRequest) (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCheckoutDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCheckoutDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCheckoutDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutEditCheckoutPostRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	unibeeApiMerchantCheckoutEditReq *UnibeeApiMerchantCheckoutEditReq
}

func (r CheckoutSetupCheckoutEditCheckoutPostRequest) UnibeeApiMerchantCheckoutEditReq(unibeeApiMerchantCheckoutEditReq UnibeeApiMerchantCheckoutEditReq) CheckoutSetupCheckoutEditCheckoutPostRequest {
	r.unibeeApiMerchantCheckoutEditReq = &unibeeApiMerchantCheckoutEditReq
	return r
}

func (r CheckoutSetupCheckoutEditCheckoutPostRequest) Execute() (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutEditCheckoutPostExecute(r)
}

/*
CheckoutEditCheckoutPost Edit Merchant Checkout

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutEditCheckoutPostRequest
*/
func (a *CheckoutSetupService) CheckoutEditCheckoutPost(ctx context.Context) CheckoutSetupCheckoutEditCheckoutPostRequest {
	return CheckoutSetupCheckoutEditCheckoutPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutDetailGet200Response
func (a *CheckoutSetupService) CheckoutEditCheckoutPostExecute(r CheckoutSetupCheckoutEditCheckoutPostRequest) (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutEditCheckoutPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/edit_checkout"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCheckoutEditReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCheckoutEditReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCheckoutEditReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutGetLinkGetRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	checkoutId *int64
	planId *int64
}

// checkout id
func (r CheckoutSetupCheckoutGetLinkGetRequest) CheckoutId(checkoutId int64) CheckoutSetupCheckoutGetLinkGetRequest {
	r.checkoutId = &checkoutId
	return r
}

func (r CheckoutSetupCheckoutGetLinkGetRequest) PlanId(planId int64) CheckoutSetupCheckoutGetLinkGetRequest {
	r.planId = &planId
	return r
}

func (r CheckoutSetupCheckoutGetLinkGetRequest) Execute() (*MerchantCheckoutGetLinkGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutGetLinkGetExecute(r)
}

/*
CheckoutGetLinkGet Get Merchant Checkout Link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutGetLinkGetRequest
*/
func (a *CheckoutSetupService) CheckoutGetLinkGet(ctx context.Context) CheckoutSetupCheckoutGetLinkGetRequest {
	return CheckoutSetupCheckoutGetLinkGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutGetLinkGet200Response
func (a *CheckoutSetupService) CheckoutGetLinkGetExecute(r CheckoutSetupCheckoutGetLinkGetRequest) (*MerchantCheckoutGetLinkGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutGetLinkGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutGetLinkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/get_link"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.checkoutId == nil {
		return localVarReturnValue, nil, reportError("checkoutId is required and must be specified")
	}
	if r.planId == nil {
		return localVarReturnValue, nil, reportError("planId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "checkoutId", r.checkoutId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "planId", r.planId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutGetLinkPostRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	unibeeApiMerchantCheckoutGetLinkReq *UnibeeApiMerchantCheckoutGetLinkReq
}

func (r CheckoutSetupCheckoutGetLinkPostRequest) UnibeeApiMerchantCheckoutGetLinkReq(unibeeApiMerchantCheckoutGetLinkReq UnibeeApiMerchantCheckoutGetLinkReq) CheckoutSetupCheckoutGetLinkPostRequest {
	r.unibeeApiMerchantCheckoutGetLinkReq = &unibeeApiMerchantCheckoutGetLinkReq
	return r
}

func (r CheckoutSetupCheckoutGetLinkPostRequest) Execute() (*MerchantCheckoutGetLinkGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutGetLinkPostExecute(r)
}

/*
CheckoutGetLinkPost Get Merchant Checkout Link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutGetLinkPostRequest
*/
func (a *CheckoutSetupService) CheckoutGetLinkPost(ctx context.Context) CheckoutSetupCheckoutGetLinkPostRequest {
	return CheckoutSetupCheckoutGetLinkPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutGetLinkGet200Response
func (a *CheckoutSetupService) CheckoutGetLinkPostExecute(r CheckoutSetupCheckoutGetLinkPostRequest) (*MerchantCheckoutGetLinkGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutGetLinkGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutGetLinkPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/get_link"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCheckoutGetLinkReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCheckoutGetLinkReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCheckoutGetLinkReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutListGetRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	searchKey *string
}

// Search checkout id|name|description
func (r CheckoutSetupCheckoutListGetRequest) SearchKey(searchKey string) CheckoutSetupCheckoutListGetRequest {
	r.searchKey = &searchKey
	return r
}

func (r CheckoutSetupCheckoutListGetRequest) Execute() (*MerchantCheckoutListGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutListGetExecute(r)
}

/*
CheckoutListGet Get Merchant Checkout list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutListGetRequest
*/
func (a *CheckoutSetupService) CheckoutListGet(ctx context.Context) CheckoutSetupCheckoutListGetRequest {
	return CheckoutSetupCheckoutListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutListGet200Response
func (a *CheckoutSetupService) CheckoutListGetExecute(r CheckoutSetupCheckoutListGetRequest) (*MerchantCheckoutListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SearchKey", r.searchKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutListPostRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	unibeeApiMerchantCheckoutListReq *UnibeeApiMerchantCheckoutListReq
}

func (r CheckoutSetupCheckoutListPostRequest) UnibeeApiMerchantCheckoutListReq(unibeeApiMerchantCheckoutListReq UnibeeApiMerchantCheckoutListReq) CheckoutSetupCheckoutListPostRequest {
	r.unibeeApiMerchantCheckoutListReq = &unibeeApiMerchantCheckoutListReq
	return r
}

func (r CheckoutSetupCheckoutListPostRequest) Execute() (*MerchantCheckoutListGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutListPostExecute(r)
}

/*
CheckoutListPost Get Merchant Checkout list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutListPostRequest
*/
func (a *CheckoutSetupService) CheckoutListPost(ctx context.Context) CheckoutSetupCheckoutListPostRequest {
	return CheckoutSetupCheckoutListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutListGet200Response
func (a *CheckoutSetupService) CheckoutListPostExecute(r CheckoutSetupCheckoutListPostRequest) (*MerchantCheckoutListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCheckoutListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCheckoutListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCheckoutListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CheckoutSetupCheckoutNewCheckoutPostRequest struct {
	ctx context.Context
	ApiService *CheckoutSetupService
	unibeeApiMerchantCheckoutNewReq *UnibeeApiMerchantCheckoutNewReq
}

func (r CheckoutSetupCheckoutNewCheckoutPostRequest) UnibeeApiMerchantCheckoutNewReq(unibeeApiMerchantCheckoutNewReq UnibeeApiMerchantCheckoutNewReq) CheckoutSetupCheckoutNewCheckoutPostRequest {
	r.unibeeApiMerchantCheckoutNewReq = &unibeeApiMerchantCheckoutNewReq
	return r
}

func (r CheckoutSetupCheckoutNewCheckoutPostRequest) Execute() (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	return r.ApiService.CheckoutNewCheckoutPostExecute(r)
}

/*
CheckoutNewCheckoutPost New Merchant Checkout

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CheckoutSetupCheckoutNewCheckoutPostRequest
*/
func (a *CheckoutSetupService) CheckoutNewCheckoutPost(ctx context.Context) CheckoutSetupCheckoutNewCheckoutPostRequest {
	return CheckoutSetupCheckoutNewCheckoutPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCheckoutDetailGet200Response
func (a *CheckoutSetupService) CheckoutNewCheckoutPostExecute(r CheckoutSetupCheckoutNewCheckoutPostRequest) (*MerchantCheckoutDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCheckoutDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckoutSetupService.CheckoutNewCheckoutPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/checkout/new_checkout"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCheckoutNewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCheckoutNewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCheckoutNewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
