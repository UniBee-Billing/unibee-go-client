/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202508041414
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
)

// checks if the UnibeeInternalLogicMiddlewareLicenseLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeInternalLogicMiddlewareLicenseLicense{}

// UnibeeInternalLogicMiddlewareLicenseLicense struct for UnibeeInternalLogicMiddlewareLicenseLicense
type UnibeeInternalLogicMiddlewareLicenseLicense struct {
	IsPaid *bool `json:"isPaid,omitempty"`
	// License, Premium Version will contain License
	License *string `json:"license,omitempty"`
	// OwnerEmail
	OwnerEmail *string `json:"ownerEmail,omitempty"`
	Plan *UnibeeApiBeanPlan `json:"plan,omitempty"`
	Subscription *UnibeeApiBeanSubscription `json:"subscription,omitempty"`
	Version *UnibeeInternalLogicMiddlewareLicenseMerchantVersion `json:"version,omitempty"`
}

// NewUnibeeInternalLogicMiddlewareLicenseLicense instantiates a new UnibeeInternalLogicMiddlewareLicenseLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeInternalLogicMiddlewareLicenseLicense() *UnibeeInternalLogicMiddlewareLicenseLicense {
	this := UnibeeInternalLogicMiddlewareLicenseLicense{}
	return &this
}

// NewUnibeeInternalLogicMiddlewareLicenseLicenseWithDefaults instantiates a new UnibeeInternalLogicMiddlewareLicenseLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeInternalLogicMiddlewareLicenseLicenseWithDefaults() *UnibeeInternalLogicMiddlewareLicenseLicense {
	this := UnibeeInternalLogicMiddlewareLicenseLicense{}
	return &this
}

// GetIsPaid returns the IsPaid field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetIsPaid() bool {
	if o == nil || IsNil(o.IsPaid) {
		var ret bool
		return ret
	}
	return *o.IsPaid
}

// GetIsPaidOk returns a tuple with the IsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetIsPaidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaid) {
		return nil, false
	}
	return o.IsPaid, true
}

// HasIsPaid returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) HasIsPaid() bool {
	if o != nil && !IsNil(o.IsPaid) {
		return true
	}

	return false
}

// SetIsPaid gets a reference to the given bool and assigns it to the IsPaid field.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) SetIsPaid(v bool) {
	o.IsPaid = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) SetLicense(v string) {
	o.License = &v
}

// GetOwnerEmail returns the OwnerEmail field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetOwnerEmail() string {
	if o == nil || IsNil(o.OwnerEmail) {
		var ret string
		return ret
	}
	return *o.OwnerEmail
}

// GetOwnerEmailOk returns a tuple with the OwnerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetOwnerEmailOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerEmail) {
		return nil, false
	}
	return o.OwnerEmail, true
}

// HasOwnerEmail returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) HasOwnerEmail() bool {
	if o != nil && !IsNil(o.OwnerEmail) {
		return true
	}

	return false
}

// SetOwnerEmail gets a reference to the given string and assigns it to the OwnerEmail field.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) SetOwnerEmail(v string) {
	o.OwnerEmail = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetPlan() UnibeeApiBeanPlan {
	if o == nil || IsNil(o.Plan) {
		var ret UnibeeApiBeanPlan
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetPlanOk() (*UnibeeApiBeanPlan, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given UnibeeApiBeanPlan and assigns it to the Plan field.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) SetPlan(v UnibeeApiBeanPlan) {
	o.Plan = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetSubscription() UnibeeApiBeanSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret UnibeeApiBeanSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetSubscriptionOk() (*UnibeeApiBeanSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given UnibeeApiBeanSubscription and assigns it to the Subscription field.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) SetSubscription(v UnibeeApiBeanSubscription) {
	o.Subscription = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetVersion() UnibeeInternalLogicMiddlewareLicenseMerchantVersion {
	if o == nil || IsNil(o.Version) {
		var ret UnibeeInternalLogicMiddlewareLicenseMerchantVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) GetVersionOk() (*UnibeeInternalLogicMiddlewareLicenseMerchantVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given UnibeeInternalLogicMiddlewareLicenseMerchantVersion and assigns it to the Version field.
func (o *UnibeeInternalLogicMiddlewareLicenseLicense) SetVersion(v UnibeeInternalLogicMiddlewareLicenseMerchantVersion) {
	o.Version = &v
}

func (o UnibeeInternalLogicMiddlewareLicenseLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeInternalLogicMiddlewareLicenseLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsPaid) {
		toSerialize["isPaid"] = o.IsPaid
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.OwnerEmail) {
		toSerialize["ownerEmail"] = o.OwnerEmail
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableUnibeeInternalLogicMiddlewareLicenseLicense struct {
	value *UnibeeInternalLogicMiddlewareLicenseLicense
	isSet bool
}

func (v NullableUnibeeInternalLogicMiddlewareLicenseLicense) Get() *UnibeeInternalLogicMiddlewareLicenseLicense {
	return v.value
}

func (v *NullableUnibeeInternalLogicMiddlewareLicenseLicense) Set(val *UnibeeInternalLogicMiddlewareLicenseLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeInternalLogicMiddlewareLicenseLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeInternalLogicMiddlewareLicenseLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeInternalLogicMiddlewareLicenseLicense(val *UnibeeInternalLogicMiddlewareLicenseLicense) *NullableUnibeeInternalLogicMiddlewareLicenseLicense {
	return &NullableUnibeeInternalLogicMiddlewareLicenseLicense{value: val, isSet: true}
}

func (v NullableUnibeeInternalLogicMiddlewareLicenseLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeInternalLogicMiddlewareLicenseLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


