/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202502100809
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// CreditService Credit service
type CreditService service

type CreditCreditConfigListGetRequest struct {
	ctx context.Context
	ApiService *CreditService
	types *[]int32
	currency *string
}

// type list of credit account, 1-main account, 2-promo credit account
func (r CreditCreditConfigListGetRequest) Types(types []int32) CreditCreditConfigListGetRequest {
	r.types = &types
	return r
}

// currency
func (r CreditCreditConfigListGetRequest) Currency(currency string) CreditCreditConfigListGetRequest {
	r.currency = &currency
	return r
}

func (r CreditCreditConfigListGetRequest) Execute() (*MerchantCreditConfigListGet200Response, *http.Response, error) {
	return r.ApiService.CreditConfigListGetExecute(r)
}

/*
CreditConfigListGet Get Credit Config list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditConfigListGetRequest
*/
func (a *CreditService) CreditConfigListGet(ctx context.Context) CreditCreditConfigListGetRequest {
	return CreditCreditConfigListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditConfigListGet200Response
func (a *CreditService) CreditConfigListGetExecute(r CreditCreditConfigListGetRequest) (*MerchantCreditConfigListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditConfigListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditConfigListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/config_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.types != nil {
		t := *r.types
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "types", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "types", t, "multi")
		}
	}
	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditConfigListPostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditConfigListReq *UnibeeApiMerchantCreditConfigListReq
}

func (r CreditCreditConfigListPostRequest) UnibeeApiMerchantCreditConfigListReq(unibeeApiMerchantCreditConfigListReq UnibeeApiMerchantCreditConfigListReq) CreditCreditConfigListPostRequest {
	r.unibeeApiMerchantCreditConfigListReq = &unibeeApiMerchantCreditConfigListReq
	return r
}

func (r CreditCreditConfigListPostRequest) Execute() (*MerchantCreditConfigListGet200Response, *http.Response, error) {
	return r.ApiService.CreditConfigListPostExecute(r)
}

/*
CreditConfigListPost Get Credit Config list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditConfigListPostRequest
*/
func (a *CreditService) CreditConfigListPost(ctx context.Context) CreditCreditConfigListPostRequest {
	return CreditCreditConfigListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditConfigListGet200Response
func (a *CreditService) CreditConfigListPostExecute(r CreditCreditConfigListPostRequest) (*MerchantCreditConfigListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditConfigListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditConfigListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/config_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditConfigListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditConfigListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditConfigListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditCreditAccountListGetRequest struct {
	ctx context.Context
	ApiService *CreditService
	userId *int64
	email *string
	sortField *string
	sortType *string
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// filter id of user
func (r CreditCreditCreditAccountListGetRequest) UserId(userId int64) CreditCreditCreditAccountListGetRequest {
	r.userId = &userId
	return r
}

// filter email of user
func (r CreditCreditCreditAccountListGetRequest) Email(email string) CreditCreditCreditAccountListGetRequest {
	r.email = &email
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r CreditCreditCreditAccountListGetRequest) SortField(sortField string) CreditCreditCreditAccountListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r CreditCreditCreditAccountListGetRequest) SortType(sortType string) CreditCreditCreditAccountListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start 0
func (r CreditCreditCreditAccountListGetRequest) Page(page int32) CreditCreditCreditAccountListGetRequest {
	r.page = &page
	return r
}

// Count Of Per Page
func (r CreditCreditCreditAccountListGetRequest) Count(count int32) CreditCreditCreditAccountListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart
func (r CreditCreditCreditAccountListGetRequest) CreateTimeStart(createTimeStart int64) CreditCreditCreditAccountListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd
func (r CreditCreditCreditAccountListGetRequest) CreateTimeEnd(createTimeEnd int64) CreditCreditCreditAccountListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r CreditCreditCreditAccountListGetRequest) Execute() (*MerchantCreditCreditAccountListGet200Response, *http.Response, error) {
	return r.ApiService.CreditCreditAccountListGetExecute(r)
}

/*
CreditCreditAccountListGet Get Credit Account List

Get Credit Account list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditCreditAccountListGetRequest
*/
func (a *CreditService) CreditCreditAccountListGet(ctx context.Context) CreditCreditCreditAccountListGetRequest {
	return CreditCreditCreditAccountListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditCreditAccountListGet200Response
func (a *CreditService) CreditCreditAccountListGetExecute(r CreditCreditCreditAccountListGetRequest) (*MerchantCreditCreditAccountListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditCreditAccountListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditCreditAccountListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/credit_account_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditCreditTransactionListGetRequest struct {
	ctx context.Context
	ApiService *CreditService
	accountType *int32
	userId *int64
	email *string
	currency *string
	sortField *string
	sortType *string
	transactionTypes *[]int32
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// filter type of account, 1-main account, 2-promo credit account
func (r CreditCreditCreditTransactionListGetRequest) AccountType(accountType int32) CreditCreditCreditTransactionListGetRequest {
	r.accountType = &accountType
	return r
}

// filter id of user
func (r CreditCreditCreditTransactionListGetRequest) UserId(userId int64) CreditCreditCreditTransactionListGetRequest {
	r.userId = &userId
	return r
}

// filter email of user
func (r CreditCreditCreditTransactionListGetRequest) Email(email string) CreditCreditCreditTransactionListGetRequest {
	r.email = &email
	return r
}

// filter currency of account
func (r CreditCreditCreditTransactionListGetRequest) Currency(currency string) CreditCreditCreditTransactionListGetRequest {
	r.currency = &currency
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r CreditCreditCreditTransactionListGetRequest) SortField(sortField string) CreditCreditCreditTransactionListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r CreditCreditCreditTransactionListGetRequest) SortType(sortType string) CreditCreditCreditTransactionListGetRequest {
	r.sortType = &sortType
	return r
}

// transaction type。1-recharge income，2-payment out，3-refund income，4-withdraw out，5-withdraw failed income, 6-admin change，7-recharge refund out
func (r CreditCreditCreditTransactionListGetRequest) TransactionTypes(transactionTypes []int32) CreditCreditCreditTransactionListGetRequest {
	r.transactionTypes = &transactionTypes
	return r
}

// Page, Start 0
func (r CreditCreditCreditTransactionListGetRequest) Page(page int32) CreditCreditCreditTransactionListGetRequest {
	r.page = &page
	return r
}

// Count Of Per Page
func (r CreditCreditCreditTransactionListGetRequest) Count(count int32) CreditCreditCreditTransactionListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart
func (r CreditCreditCreditTransactionListGetRequest) CreateTimeStart(createTimeStart int64) CreditCreditCreditTransactionListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd
func (r CreditCreditCreditTransactionListGetRequest) CreateTimeEnd(createTimeEnd int64) CreditCreditCreditTransactionListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r CreditCreditCreditTransactionListGetRequest) Execute() (*MerchantCreditCreditTransactionListGet200Response, *http.Response, error) {
	return r.ApiService.CreditCreditTransactionListGetExecute(r)
}

/*
CreditCreditTransactionListGet Get Credit Transaction List

Get Credit Transaction list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditCreditTransactionListGetRequest
*/
func (a *CreditService) CreditCreditTransactionListGet(ctx context.Context) CreditCreditCreditTransactionListGetRequest {
	return CreditCreditCreditTransactionListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditCreditTransactionListGet200Response
func (a *CreditService) CreditCreditTransactionListGetExecute(r CreditCreditCreditTransactionListGetRequest) (*MerchantCreditCreditTransactionListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditCreditTransactionListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditCreditTransactionListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/credit_transaction_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountType == nil {
		return localVarReturnValue, nil, reportError("accountType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.transactionTypes != nil {
		t := *r.transactionTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transactionTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transactionTypes", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditCreditTransactionListPostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditCreditTransactionListReq *UnibeeApiMerchantCreditCreditTransactionListReq
}

func (r CreditCreditCreditTransactionListPostRequest) UnibeeApiMerchantCreditCreditTransactionListReq(unibeeApiMerchantCreditCreditTransactionListReq UnibeeApiMerchantCreditCreditTransactionListReq) CreditCreditCreditTransactionListPostRequest {
	r.unibeeApiMerchantCreditCreditTransactionListReq = &unibeeApiMerchantCreditCreditTransactionListReq
	return r
}

func (r CreditCreditCreditTransactionListPostRequest) Execute() (*MerchantCreditCreditTransactionListGet200Response, *http.Response, error) {
	return r.ApiService.CreditCreditTransactionListPostExecute(r)
}

/*
CreditCreditTransactionListPost Get Credit Transaction List

Get Credit Transaction list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditCreditTransactionListPostRequest
*/
func (a *CreditService) CreditCreditTransactionListPost(ctx context.Context) CreditCreditCreditTransactionListPostRequest {
	return CreditCreditCreditTransactionListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditCreditTransactionListGet200Response
func (a *CreditService) CreditCreditTransactionListPostExecute(r CreditCreditCreditTransactionListPostRequest) (*MerchantCreditCreditTransactionListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditCreditTransactionListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditCreditTransactionListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/credit_transaction_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditCreditTransactionListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditCreditTransactionListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditCreditTransactionListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditDetailGetRequest struct {
	ctx context.Context
	ApiService *CreditService
	id *int64
}

// The credit account Id
func (r CreditCreditDetailGetRequest) Id(id int64) CreditCreditDetailGetRequest {
	r.id = &id
	return r
}

func (r CreditCreditDetailGetRequest) Execute() (*MerchantCreditDetailGet200Response, *http.Response, error) {
	return r.ApiService.CreditDetailGetExecute(r)
}

/*
CreditDetailGet Credit Account Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditDetailGetRequest
*/
func (a *CreditService) CreditDetailGet(ctx context.Context) CreditCreditDetailGetRequest {
	return CreditCreditDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditDetailGet200Response
func (a *CreditService) CreditDetailGetExecute(r CreditCreditDetailGetRequest) (*MerchantCreditDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditDetailPostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditDetailReq *UnibeeApiMerchantCreditDetailReq
}

func (r CreditCreditDetailPostRequest) UnibeeApiMerchantCreditDetailReq(unibeeApiMerchantCreditDetailReq UnibeeApiMerchantCreditDetailReq) CreditCreditDetailPostRequest {
	r.unibeeApiMerchantCreditDetailReq = &unibeeApiMerchantCreditDetailReq
	return r
}

func (r CreditCreditDetailPostRequest) Execute() (*MerchantCreditDetailGet200Response, *http.Response, error) {
	return r.ApiService.CreditDetailPostExecute(r)
}

/*
CreditDetailPost Credit Account Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditDetailPostRequest
*/
func (a *CreditService) CreditDetailPost(ctx context.Context) CreditCreditDetailPostRequest {
	return CreditCreditDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditDetailGet200Response
func (a *CreditService) CreditDetailPostExecute(r CreditCreditDetailPostRequest) (*MerchantCreditDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditEditConfigPostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditEditConfigReq *UnibeeApiMerchantCreditEditConfigReq
}

func (r CreditCreditEditConfigPostRequest) UnibeeApiMerchantCreditEditConfigReq(unibeeApiMerchantCreditEditConfigReq UnibeeApiMerchantCreditEditConfigReq) CreditCreditEditConfigPostRequest {
	r.unibeeApiMerchantCreditEditConfigReq = &unibeeApiMerchantCreditEditConfigReq
	return r
}

func (r CreditCreditEditConfigPostRequest) Execute() (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	return r.ApiService.CreditEditConfigPostExecute(r)
}

/*
CreditEditConfigPost Edit Credit Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditEditConfigPostRequest
*/
func (a *CreditService) CreditEditConfigPost(ctx context.Context) CreditCreditEditConfigPostRequest {
	return CreditCreditEditConfigPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditEditConfigPost200Response
func (a *CreditService) CreditEditConfigPostExecute(r CreditCreditEditConfigPostRequest) (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditEditConfigPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditEditConfigPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/edit_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditEditConfigReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditEditConfigReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditEditConfigReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditEditCreditAccountPostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditEditCreditAccountReq *UnibeeApiMerchantCreditEditCreditAccountReq
}

func (r CreditCreditEditCreditAccountPostRequest) UnibeeApiMerchantCreditEditCreditAccountReq(unibeeApiMerchantCreditEditCreditAccountReq UnibeeApiMerchantCreditEditCreditAccountReq) CreditCreditEditCreditAccountPostRequest {
	r.unibeeApiMerchantCreditEditCreditAccountReq = &unibeeApiMerchantCreditEditCreditAccountReq
	return r
}

func (r CreditCreditEditCreditAccountPostRequest) Execute() (*MerchantCreditEditCreditAccountPost200Response, *http.Response, error) {
	return r.ApiService.CreditEditCreditAccountPostExecute(r)
}

/*
CreditEditCreditAccountPost Edit User Credit Account Config

Edit User Credit Account Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditEditCreditAccountPostRequest
*/
func (a *CreditService) CreditEditCreditAccountPost(ctx context.Context) CreditCreditEditCreditAccountPostRequest {
	return CreditCreditEditCreditAccountPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditEditCreditAccountPost200Response
func (a *CreditService) CreditEditCreditAccountPostExecute(r CreditCreditEditCreditAccountPostRequest) (*MerchantCreditEditCreditAccountPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditEditCreditAccountPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditEditCreditAccountPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/edit_credit_account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditEditCreditAccountReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditEditCreditAccountReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditEditCreditAccountReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditNewConfigPostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditNewConfigReq *UnibeeApiMerchantCreditNewConfigReq
}

func (r CreditCreditNewConfigPostRequest) UnibeeApiMerchantCreditNewConfigReq(unibeeApiMerchantCreditNewConfigReq UnibeeApiMerchantCreditNewConfigReq) CreditCreditNewConfigPostRequest {
	r.unibeeApiMerchantCreditNewConfigReq = &unibeeApiMerchantCreditNewConfigReq
	return r
}

func (r CreditCreditNewConfigPostRequest) Execute() (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	return r.ApiService.CreditNewConfigPostExecute(r)
}

/*
CreditNewConfigPost Setup Credit Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditNewConfigPostRequest
*/
func (a *CreditService) CreditNewConfigPost(ctx context.Context) CreditCreditNewConfigPostRequest {
	return CreditCreditNewConfigPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditEditConfigPost200Response
func (a *CreditService) CreditNewConfigPostExecute(r CreditCreditNewConfigPostRequest) (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditEditConfigPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditNewConfigPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/new_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditNewConfigReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditNewConfigReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditNewConfigReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCreditNewCreditRechargePostRequest struct {
	ctx context.Context
	ApiService *CreditService
	unibeeApiMerchantCreditNewCreditRechargeReq *UnibeeApiMerchantCreditNewCreditRechargeReq
}

func (r CreditCreditNewCreditRechargePostRequest) UnibeeApiMerchantCreditNewCreditRechargeReq(unibeeApiMerchantCreditNewCreditRechargeReq UnibeeApiMerchantCreditNewCreditRechargeReq) CreditCreditNewCreditRechargePostRequest {
	r.unibeeApiMerchantCreditNewCreditRechargeReq = &unibeeApiMerchantCreditNewCreditRechargeReq
	return r
}

func (r CreditCreditNewCreditRechargePostRequest) Execute() (*MerchantCreditNewCreditRechargePost200Response, *http.Response, error) {
	return r.ApiService.CreditNewCreditRechargePostExecute(r)
}

/*
CreditNewCreditRechargePost New Credit Recharge

New Credit Recharge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCreditNewCreditRechargePostRequest
*/
func (a *CreditService) CreditNewCreditRechargePost(ctx context.Context) CreditCreditNewCreditRechargePostRequest {
	return CreditCreditNewCreditRechargePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditNewCreditRechargePost200Response
func (a *CreditService) CreditNewCreditRechargePostExecute(r CreditCreditNewCreditRechargePostRequest) (*MerchantCreditNewCreditRechargePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditNewCreditRechargePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditService.CreditNewCreditRechargePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/new_credit_recharge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditNewCreditRechargeReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditNewCreditRechargeReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditNewCreditRechargeReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
