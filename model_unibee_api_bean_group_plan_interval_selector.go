/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202509290914
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
)

// checks if the UnibeeApiBeanGroupPlanIntervalSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeApiBeanGroupPlanIntervalSelector{}

// UnibeeApiBeanGroupPlanIntervalSelector struct for UnibeeApiBeanGroupPlanIntervalSelector
type UnibeeApiBeanGroupPlanIntervalSelector struct {
	// Number Of IntervalUnit，em: day|month|year|week
	IntervalCount *int32 `json:"intervalCount,omitempty"`
	// Plan Interval Unit，em: day|month|year|week
	IntervalUnit *string `json:"intervalUnit,omitempty"`
}

// NewUnibeeApiBeanGroupPlanIntervalSelector instantiates a new UnibeeApiBeanGroupPlanIntervalSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeApiBeanGroupPlanIntervalSelector() *UnibeeApiBeanGroupPlanIntervalSelector {
	this := UnibeeApiBeanGroupPlanIntervalSelector{}
	return &this
}

// NewUnibeeApiBeanGroupPlanIntervalSelectorWithDefaults instantiates a new UnibeeApiBeanGroupPlanIntervalSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeApiBeanGroupPlanIntervalSelectorWithDefaults() *UnibeeApiBeanGroupPlanIntervalSelector {
	this := UnibeeApiBeanGroupPlanIntervalSelector{}
	return &this
}

// GetIntervalCount returns the IntervalCount field value if set, zero value otherwise.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) GetIntervalCount() int32 {
	if o == nil || IsNil(o.IntervalCount) {
		var ret int32
		return ret
	}
	return *o.IntervalCount
}

// GetIntervalCountOk returns a tuple with the IntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) GetIntervalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalCount) {
		return nil, false
	}
	return o.IntervalCount, true
}

// HasIntervalCount returns a boolean if a field has been set.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) HasIntervalCount() bool {
	if o != nil && !IsNil(o.IntervalCount) {
		return true
	}

	return false
}

// SetIntervalCount gets a reference to the given int32 and assigns it to the IntervalCount field.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) SetIntervalCount(v int32) {
	o.IntervalCount = &v
}

// GetIntervalUnit returns the IntervalUnit field value if set, zero value otherwise.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) GetIntervalUnit() string {
	if o == nil || IsNil(o.IntervalUnit) {
		var ret string
		return ret
	}
	return *o.IntervalUnit
}

// GetIntervalUnitOk returns a tuple with the IntervalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) GetIntervalUnitOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalUnit) {
		return nil, false
	}
	return o.IntervalUnit, true
}

// HasIntervalUnit returns a boolean if a field has been set.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) HasIntervalUnit() bool {
	if o != nil && !IsNil(o.IntervalUnit) {
		return true
	}

	return false
}

// SetIntervalUnit gets a reference to the given string and assigns it to the IntervalUnit field.
func (o *UnibeeApiBeanGroupPlanIntervalSelector) SetIntervalUnit(v string) {
	o.IntervalUnit = &v
}

func (o UnibeeApiBeanGroupPlanIntervalSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeApiBeanGroupPlanIntervalSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntervalCount) {
		toSerialize["intervalCount"] = o.IntervalCount
	}
	if !IsNil(o.IntervalUnit) {
		toSerialize["intervalUnit"] = o.IntervalUnit
	}
	return toSerialize, nil
}

type NullableUnibeeApiBeanGroupPlanIntervalSelector struct {
	value *UnibeeApiBeanGroupPlanIntervalSelector
	isSet bool
}

func (v NullableUnibeeApiBeanGroupPlanIntervalSelector) Get() *UnibeeApiBeanGroupPlanIntervalSelector {
	return v.value
}

func (v *NullableUnibeeApiBeanGroupPlanIntervalSelector) Set(val *UnibeeApiBeanGroupPlanIntervalSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeApiBeanGroupPlanIntervalSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeApiBeanGroupPlanIntervalSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeApiBeanGroupPlanIntervalSelector(val *UnibeeApiBeanGroupPlanIntervalSelector) *NullableUnibeeApiBeanGroupPlanIntervalSelector {
	return &NullableUnibeeApiBeanGroupPlanIntervalSelector{value: val, isSet: true}
}

func (v NullableUnibeeApiBeanGroupPlanIntervalSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeApiBeanGroupPlanIntervalSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


