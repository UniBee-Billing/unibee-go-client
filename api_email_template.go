/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202509191247
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// EmailTemplateService EmailTemplate service
type EmailTemplateService service

type EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
	unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq *UnibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq
}

func (r EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest) UnibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq(unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq UnibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq) EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest {
	r.unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq = &unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq
	return r
}

func (r EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.EmailCustomLocalizationTemplateSyncPostExecute(r)
}

/*
EmailCustomLocalizationTemplateSyncPost Customize Localization Template Sync

Sync the custom localization email template to gateway (sendgrid)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest
*/
func (a *EmailTemplateService) EmailCustomLocalizationTemplateSyncPost(ctx context.Context) EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest {
	return EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *EmailTemplateService) EmailCustomLocalizationTemplateSyncPostExecute(r EmailTemplateEmailCustomLocalizationTemplateSyncPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailCustomLocalizationTemplateSyncPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/custom_localization_template_sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailCustomizeLocalizationTemplateSyncReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
	unibeeApiMerchantEmailActivateLocalizationVersionReq *UnibeeApiMerchantEmailActivateLocalizationVersionReq
}

func (r EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest) UnibeeApiMerchantEmailActivateLocalizationVersionReq(unibeeApiMerchantEmailActivateLocalizationVersionReq UnibeeApiMerchantEmailActivateLocalizationVersionReq) EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest {
	r.unibeeApiMerchantEmailActivateLocalizationVersionReq = &unibeeApiMerchantEmailActivateLocalizationVersionReq
	return r
}

func (r EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.EmailTemplateActivateLocalizationVersionPostExecute(r)
}

/*
EmailTemplateActivateLocalizationVersionPost Activate Email Template Localization Version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest
*/
func (a *EmailTemplateService) EmailTemplateActivateLocalizationVersionPost(ctx context.Context) EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest {
	return EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *EmailTemplateService) EmailTemplateActivateLocalizationVersionPostExecute(r EmailTemplateEmailTemplateActivateLocalizationVersionPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailTemplateActivateLocalizationVersionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_activate_localization_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailActivateLocalizationVersionReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailActivateLocalizationVersionReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailActivateLocalizationVersionReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailTemplateEmailTemplateAddLocalizationVersionPostRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
	unibeeApiMerchantEmailAddLocalizationVersionReq *UnibeeApiMerchantEmailAddLocalizationVersionReq
}

func (r EmailTemplateEmailTemplateAddLocalizationVersionPostRequest) UnibeeApiMerchantEmailAddLocalizationVersionReq(unibeeApiMerchantEmailAddLocalizationVersionReq UnibeeApiMerchantEmailAddLocalizationVersionReq) EmailTemplateEmailTemplateAddLocalizationVersionPostRequest {
	r.unibeeApiMerchantEmailAddLocalizationVersionReq = &unibeeApiMerchantEmailAddLocalizationVersionReq
	return r
}

func (r EmailTemplateEmailTemplateAddLocalizationVersionPostRequest) Execute() (*MerchantEmailTemplateAddLocalizationVersionPost200Response, *http.Response, error) {
	return r.ApiService.EmailTemplateAddLocalizationVersionPostExecute(r)
}

/*
EmailTemplateAddLocalizationVersionPost Add Email Template Localization Version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailTemplateAddLocalizationVersionPostRequest
*/
func (a *EmailTemplateService) EmailTemplateAddLocalizationVersionPost(ctx context.Context) EmailTemplateEmailTemplateAddLocalizationVersionPostRequest {
	return EmailTemplateEmailTemplateAddLocalizationVersionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantEmailTemplateAddLocalizationVersionPost200Response
func (a *EmailTemplateService) EmailTemplateAddLocalizationVersionPostExecute(r EmailTemplateEmailTemplateAddLocalizationVersionPostRequest) (*MerchantEmailTemplateAddLocalizationVersionPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantEmailTemplateAddLocalizationVersionPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailTemplateAddLocalizationVersionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_add_localization_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailAddLocalizationVersionReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailAddLocalizationVersionReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailAddLocalizationVersionReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
	unibeeApiMerchantEmailDeleteLocalizationVersionReq *UnibeeApiMerchantEmailDeleteLocalizationVersionReq
}

func (r EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest) UnibeeApiMerchantEmailDeleteLocalizationVersionReq(unibeeApiMerchantEmailDeleteLocalizationVersionReq UnibeeApiMerchantEmailDeleteLocalizationVersionReq) EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest {
	r.unibeeApiMerchantEmailDeleteLocalizationVersionReq = &unibeeApiMerchantEmailDeleteLocalizationVersionReq
	return r
}

func (r EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.EmailTemplateDeleteLocalizationVersionPostExecute(r)
}

/*
EmailTemplateDeleteLocalizationVersionPost Delete Email Template Localization Version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest
*/
func (a *EmailTemplateService) EmailTemplateDeleteLocalizationVersionPost(ctx context.Context) EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest {
	return EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *EmailTemplateService) EmailTemplateDeleteLocalizationVersionPostExecute(r EmailTemplateEmailTemplateDeleteLocalizationVersionPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailTemplateDeleteLocalizationVersionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_delete_localization_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailDeleteLocalizationVersionReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailDeleteLocalizationVersionReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailDeleteLocalizationVersionReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailTemplateEmailTemplateEditLocalizationVersionPostRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
	unibeeApiMerchantEmailEditLocalizationVersionReq *UnibeeApiMerchantEmailEditLocalizationVersionReq
}

func (r EmailTemplateEmailTemplateEditLocalizationVersionPostRequest) UnibeeApiMerchantEmailEditLocalizationVersionReq(unibeeApiMerchantEmailEditLocalizationVersionReq UnibeeApiMerchantEmailEditLocalizationVersionReq) EmailTemplateEmailTemplateEditLocalizationVersionPostRequest {
	r.unibeeApiMerchantEmailEditLocalizationVersionReq = &unibeeApiMerchantEmailEditLocalizationVersionReq
	return r
}

func (r EmailTemplateEmailTemplateEditLocalizationVersionPostRequest) Execute() (*MerchantEmailTemplateAddLocalizationVersionPost200Response, *http.Response, error) {
	return r.ApiService.EmailTemplateEditLocalizationVersionPostExecute(r)
}

/*
EmailTemplateEditLocalizationVersionPost Edit Email Template Localization Version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailTemplateEditLocalizationVersionPostRequest
*/
func (a *EmailTemplateService) EmailTemplateEditLocalizationVersionPost(ctx context.Context) EmailTemplateEmailTemplateEditLocalizationVersionPostRequest {
	return EmailTemplateEmailTemplateEditLocalizationVersionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantEmailTemplateAddLocalizationVersionPost200Response
func (a *EmailTemplateService) EmailTemplateEditLocalizationVersionPostExecute(r EmailTemplateEmailTemplateEditLocalizationVersionPostRequest) (*MerchantEmailTemplateAddLocalizationVersionPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantEmailTemplateAddLocalizationVersionPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailTemplateEditLocalizationVersionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_edit_localization_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailEditLocalizationVersionReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailEditLocalizationVersionReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailEditLocalizationVersionReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailTemplateEmailTemplateListGetRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
}

func (r EmailTemplateEmailTemplateListGetRequest) Execute() (*MerchantEmailTemplateListGet200Response, *http.Response, error) {
	return r.ApiService.EmailTemplateListGetExecute(r)
}

/*
EmailTemplateListGet Get Email Template List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailTemplateListGetRequest
*/
func (a *EmailTemplateService) EmailTemplateListGet(ctx context.Context) EmailTemplateEmailTemplateListGetRequest {
	return EmailTemplateEmailTemplateListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantEmailTemplateListGet200Response
func (a *EmailTemplateService) EmailTemplateListGetExecute(r EmailTemplateEmailTemplateListGetRequest) (*MerchantEmailTemplateListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantEmailTemplateListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailTemplateListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailTemplateEmailTemplateTestLocalizationVersionPostRequest struct {
	ctx context.Context
	ApiService *EmailTemplateService
	unibeeApiMerchantEmailTestLocalizationVersionReq *UnibeeApiMerchantEmailTestLocalizationVersionReq
}

func (r EmailTemplateEmailTemplateTestLocalizationVersionPostRequest) UnibeeApiMerchantEmailTestLocalizationVersionReq(unibeeApiMerchantEmailTestLocalizationVersionReq UnibeeApiMerchantEmailTestLocalizationVersionReq) EmailTemplateEmailTemplateTestLocalizationVersionPostRequest {
	r.unibeeApiMerchantEmailTestLocalizationVersionReq = &unibeeApiMerchantEmailTestLocalizationVersionReq
	return r
}

func (r EmailTemplateEmailTemplateTestLocalizationVersionPostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.EmailTemplateTestLocalizationVersionPostExecute(r)
}

/*
EmailTemplateTestLocalizationVersionPost Test Email Template Localization Version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EmailTemplateEmailTemplateTestLocalizationVersionPostRequest
*/
func (a *EmailTemplateService) EmailTemplateTestLocalizationVersionPost(ctx context.Context) EmailTemplateEmailTemplateTestLocalizationVersionPostRequest {
	return EmailTemplateEmailTemplateTestLocalizationVersionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *EmailTemplateService) EmailTemplateTestLocalizationVersionPostExecute(r EmailTemplateEmailTemplateTestLocalizationVersionPostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailTemplateService.EmailTemplateTestLocalizationVersionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_test_localization_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailTestLocalizationVersionReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailTestLocalizationVersionReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailTestLocalizationVersionReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
