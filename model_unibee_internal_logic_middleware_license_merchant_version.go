/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202508041414
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
)

// checks if the UnibeeInternalLogicMiddlewareLicenseMerchantVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeInternalLogicMiddlewareLicenseMerchantVersion{}

// UnibeeInternalLogicMiddlewareLicenseMerchantVersion struct for UnibeeInternalLogicMiddlewareLicenseMerchantVersion
type UnibeeInternalLogicMiddlewareLicenseMerchantVersion struct {
	// EndTime,UTC, The End Time Of Plan,0 for free
	EndTime *int64 `json:"endTime,omitempty"`
	// Expired
	Expired *bool `json:"expired,omitempty"`
	// IsPaid
	IsPaid *bool `json:"isPaid,omitempty"`
	// Name
	Name *string `json:"name,omitempty"`
	Plan *UnibeeInternalLogicMiddlewareLicensePlan `json:"plan,omitempty"`
	// StartTime,UTC, The Start Time Of Plan,0 for free
	StartTime *int64 `json:"startTime,omitempty"`
}

// NewUnibeeInternalLogicMiddlewareLicenseMerchantVersion instantiates a new UnibeeInternalLogicMiddlewareLicenseMerchantVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeInternalLogicMiddlewareLicenseMerchantVersion() *UnibeeInternalLogicMiddlewareLicenseMerchantVersion {
	this := UnibeeInternalLogicMiddlewareLicenseMerchantVersion{}
	return &this
}

// NewUnibeeInternalLogicMiddlewareLicenseMerchantVersionWithDefaults instantiates a new UnibeeInternalLogicMiddlewareLicenseMerchantVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeInternalLogicMiddlewareLicenseMerchantVersionWithDefaults() *UnibeeInternalLogicMiddlewareLicenseMerchantVersion {
	this := UnibeeInternalLogicMiddlewareLicenseMerchantVersion{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetExpired() bool {
	if o == nil || IsNil(o.Expired) {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) SetExpired(v bool) {
	o.Expired = &v
}

// GetIsPaid returns the IsPaid field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetIsPaid() bool {
	if o == nil || IsNil(o.IsPaid) {
		var ret bool
		return ret
	}
	return *o.IsPaid
}

// GetIsPaidOk returns a tuple with the IsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetIsPaidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaid) {
		return nil, false
	}
	return o.IsPaid, true
}

// HasIsPaid returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) HasIsPaid() bool {
	if o != nil && !IsNil(o.IsPaid) {
		return true
	}

	return false
}

// SetIsPaid gets a reference to the given bool and assigns it to the IsPaid field.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) SetIsPaid(v bool) {
	o.IsPaid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) SetName(v string) {
	o.Name = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetPlan() UnibeeInternalLogicMiddlewareLicensePlan {
	if o == nil || IsNil(o.Plan) {
		var ret UnibeeInternalLogicMiddlewareLicensePlan
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetPlanOk() (*UnibeeInternalLogicMiddlewareLicensePlan, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given UnibeeInternalLogicMiddlewareLicensePlan and assigns it to the Plan field.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) SetPlan(v UnibeeInternalLogicMiddlewareLicensePlan) {
	o.Plan = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) SetStartTime(v int64) {
	o.StartTime = &v
}

func (o UnibeeInternalLogicMiddlewareLicenseMerchantVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeInternalLogicMiddlewareLicenseMerchantVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	if !IsNil(o.IsPaid) {
		toSerialize["isPaid"] = o.IsPaid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion struct {
	value *UnibeeInternalLogicMiddlewareLicenseMerchantVersion
	isSet bool
}

func (v NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion) Get() *UnibeeInternalLogicMiddlewareLicenseMerchantVersion {
	return v.value
}

func (v *NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion) Set(val *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion(val *UnibeeInternalLogicMiddlewareLicenseMerchantVersion) *NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion {
	return &NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion{value: val, isSet: true}
}

func (v NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeInternalLogicMiddlewareLicenseMerchantVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


