/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202509290914
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
)

// checks if the UnibeeApiMerchantEmailTestLocalizationVersionReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeApiMerchantEmailTestLocalizationVersionReq{}

// UnibeeApiMerchantEmailTestLocalizationVersionReq struct for UnibeeApiMerchantEmailTestLocalizationVersionReq
type UnibeeApiMerchantEmailTestLocalizationVersionReq struct {
	// Email
	Email *string `json:"email,omitempty"`
	// Language
	Language *string `json:"language,omitempty"`
	// Template Name
	TemplateName *string `json:"templateName,omitempty"`
	VersionId *string `json:"versionId,omitempty"`
}

// NewUnibeeApiMerchantEmailTestLocalizationVersionReq instantiates a new UnibeeApiMerchantEmailTestLocalizationVersionReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeApiMerchantEmailTestLocalizationVersionReq() *UnibeeApiMerchantEmailTestLocalizationVersionReq {
	this := UnibeeApiMerchantEmailTestLocalizationVersionReq{}
	return &this
}

// NewUnibeeApiMerchantEmailTestLocalizationVersionReqWithDefaults instantiates a new UnibeeApiMerchantEmailTestLocalizationVersionReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeApiMerchantEmailTestLocalizationVersionReqWithDefaults() *UnibeeApiMerchantEmailTestLocalizationVersionReq {
	this := UnibeeApiMerchantEmailTestLocalizationVersionReq{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) SetEmail(v string) {
	o.Email = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) SetLanguage(v string) {
	o.Language = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName) {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateName) {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) HasTemplateName() bool {
	if o != nil && !IsNil(o.TemplateName) {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) SetTemplateName(v string) {
	o.TemplateName = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *UnibeeApiMerchantEmailTestLocalizationVersionReq) SetVersionId(v string) {
	o.VersionId = &v
}

func (o UnibeeApiMerchantEmailTestLocalizationVersionReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeApiMerchantEmailTestLocalizationVersionReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.TemplateName) {
		toSerialize["templateName"] = o.TemplateName
	}
	if !IsNil(o.VersionId) {
		toSerialize["versionId"] = o.VersionId
	}
	return toSerialize, nil
}

type NullableUnibeeApiMerchantEmailTestLocalizationVersionReq struct {
	value *UnibeeApiMerchantEmailTestLocalizationVersionReq
	isSet bool
}

func (v NullableUnibeeApiMerchantEmailTestLocalizationVersionReq) Get() *UnibeeApiMerchantEmailTestLocalizationVersionReq {
	return v.value
}

func (v *NullableUnibeeApiMerchantEmailTestLocalizationVersionReq) Set(val *UnibeeApiMerchantEmailTestLocalizationVersionReq) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeApiMerchantEmailTestLocalizationVersionReq) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeApiMerchantEmailTestLocalizationVersionReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeApiMerchantEmailTestLocalizationVersionReq(val *UnibeeApiMerchantEmailTestLocalizationVersionReq) *NullableUnibeeApiMerchantEmailTestLocalizationVersionReq {
	return &NullableUnibeeApiMerchantEmailTestLocalizationVersionReq{value: val, isSet: true}
}

func (v NullableUnibeeApiMerchantEmailTestLocalizationVersionReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeApiMerchantEmailTestLocalizationVersionReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


