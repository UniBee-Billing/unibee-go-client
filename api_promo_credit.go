/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202508050652
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// PromoCreditService PromoCredit service
type PromoCreditService service

type PromoCreditCreditEditPromoConfigPostRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	unibeeApiMerchantCreditEditPromoConfigReq *UnibeeApiMerchantCreditEditPromoConfigReq
}

func (r PromoCreditCreditEditPromoConfigPostRequest) UnibeeApiMerchantCreditEditPromoConfigReq(unibeeApiMerchantCreditEditPromoConfigReq UnibeeApiMerchantCreditEditPromoConfigReq) PromoCreditCreditEditPromoConfigPostRequest {
	r.unibeeApiMerchantCreditEditPromoConfigReq = &unibeeApiMerchantCreditEditPromoConfigReq
	return r
}

func (r PromoCreditCreditEditPromoConfigPostRequest) Execute() (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	return r.ApiService.CreditEditPromoConfigPostExecute(r)
}

/*
CreditEditPromoConfigPost Edit Promo Credit Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditEditPromoConfigPostRequest
*/
func (a *PromoCreditService) CreditEditPromoConfigPost(ctx context.Context) PromoCreditCreditEditPromoConfigPostRequest {
	return PromoCreditCreditEditPromoConfigPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditEditConfigPost200Response
func (a *PromoCreditService) CreditEditPromoConfigPostExecute(r PromoCreditCreditEditPromoConfigPostRequest) (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditEditConfigPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditEditPromoConfigPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/edit_promo_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditEditPromoConfigReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditEditPromoConfigReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditEditPromoConfigReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PromoCreditCreditGetPromoConfigGetRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	currency *string
}

// currency
func (r PromoCreditCreditGetPromoConfigGetRequest) Currency(currency string) PromoCreditCreditGetPromoConfigGetRequest {
	r.currency = &currency
	return r
}

func (r PromoCreditCreditGetPromoConfigGetRequest) Execute() (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	return r.ApiService.CreditGetPromoConfigGetExecute(r)
}

/*
CreditGetPromoConfigGet Get Promo Credit Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditGetPromoConfigGetRequest
*/
func (a *PromoCreditService) CreditGetPromoConfigGet(ctx context.Context) PromoCreditCreditGetPromoConfigGetRequest {
	return PromoCreditCreditGetPromoConfigGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditEditConfigPost200Response
func (a *PromoCreditService) CreditGetPromoConfigGetExecute(r PromoCreditCreditGetPromoConfigGetRequest) (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditEditConfigPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditGetPromoConfigGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/get_promo_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PromoCreditCreditGetPromoConfigPostRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	unibeeApiMerchantCreditPromoConfigReq *UnibeeApiMerchantCreditPromoConfigReq
}

func (r PromoCreditCreditGetPromoConfigPostRequest) UnibeeApiMerchantCreditPromoConfigReq(unibeeApiMerchantCreditPromoConfigReq UnibeeApiMerchantCreditPromoConfigReq) PromoCreditCreditGetPromoConfigPostRequest {
	r.unibeeApiMerchantCreditPromoConfigReq = &unibeeApiMerchantCreditPromoConfigReq
	return r
}

func (r PromoCreditCreditGetPromoConfigPostRequest) Execute() (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	return r.ApiService.CreditGetPromoConfigPostExecute(r)
}

/*
CreditGetPromoConfigPost Get Promo Credit Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditGetPromoConfigPostRequest
*/
func (a *PromoCreditService) CreditGetPromoConfigPost(ctx context.Context) PromoCreditCreditGetPromoConfigPostRequest {
	return PromoCreditCreditGetPromoConfigPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditEditConfigPost200Response
func (a *PromoCreditService) CreditGetPromoConfigPostExecute(r PromoCreditCreditGetPromoConfigPostRequest) (*MerchantCreditEditConfigPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditEditConfigPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditGetPromoConfigPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/get_promo_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditPromoConfigReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditPromoConfigReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditPromoConfigReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PromoCreditCreditGetPromoConfigStatisticsGetRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	currency *string
}

// currency
func (r PromoCreditCreditGetPromoConfigStatisticsGetRequest) Currency(currency string) PromoCreditCreditGetPromoConfigStatisticsGetRequest {
	r.currency = &currency
	return r
}

func (r PromoCreditCreditGetPromoConfigStatisticsGetRequest) Execute() (*MerchantCreditGetPromoConfigStatisticsGet200Response, *http.Response, error) {
	return r.ApiService.CreditGetPromoConfigStatisticsGetExecute(r)
}

/*
CreditGetPromoConfigStatisticsGet Get Promo Credit Config Statistics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditGetPromoConfigStatisticsGetRequest
*/
func (a *PromoCreditService) CreditGetPromoConfigStatisticsGet(ctx context.Context) PromoCreditCreditGetPromoConfigStatisticsGetRequest {
	return PromoCreditCreditGetPromoConfigStatisticsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditGetPromoConfigStatisticsGet200Response
func (a *PromoCreditService) CreditGetPromoConfigStatisticsGetExecute(r PromoCreditCreditGetPromoConfigStatisticsGetRequest) (*MerchantCreditGetPromoConfigStatisticsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditGetPromoConfigStatisticsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditGetPromoConfigStatisticsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/get_promo_config_statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PromoCreditCreditGetPromoConfigStatisticsPostRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	unibeeApiMerchantCreditPromoConfigStatisticsReq *UnibeeApiMerchantCreditPromoConfigStatisticsReq
}

func (r PromoCreditCreditGetPromoConfigStatisticsPostRequest) UnibeeApiMerchantCreditPromoConfigStatisticsReq(unibeeApiMerchantCreditPromoConfigStatisticsReq UnibeeApiMerchantCreditPromoConfigStatisticsReq) PromoCreditCreditGetPromoConfigStatisticsPostRequest {
	r.unibeeApiMerchantCreditPromoConfigStatisticsReq = &unibeeApiMerchantCreditPromoConfigStatisticsReq
	return r
}

func (r PromoCreditCreditGetPromoConfigStatisticsPostRequest) Execute() (*MerchantCreditGetPromoConfigStatisticsGet200Response, *http.Response, error) {
	return r.ApiService.CreditGetPromoConfigStatisticsPostExecute(r)
}

/*
CreditGetPromoConfigStatisticsPost Get Promo Credit Config Statistics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditGetPromoConfigStatisticsPostRequest
*/
func (a *PromoCreditService) CreditGetPromoConfigStatisticsPost(ctx context.Context) PromoCreditCreditGetPromoConfigStatisticsPostRequest {
	return PromoCreditCreditGetPromoConfigStatisticsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditGetPromoConfigStatisticsGet200Response
func (a *PromoCreditService) CreditGetPromoConfigStatisticsPostExecute(r PromoCreditCreditGetPromoConfigStatisticsPostRequest) (*MerchantCreditGetPromoConfigStatisticsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditGetPromoConfigStatisticsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditGetPromoConfigStatisticsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/get_promo_config_statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditPromoConfigStatisticsReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditPromoConfigStatisticsReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditPromoConfigStatisticsReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PromoCreditCreditPromoCreditDecrementPostRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	unibeeApiMerchantCreditPromoCreditDecrementReq *UnibeeApiMerchantCreditPromoCreditDecrementReq
}

func (r PromoCreditCreditPromoCreditDecrementPostRequest) UnibeeApiMerchantCreditPromoCreditDecrementReq(unibeeApiMerchantCreditPromoCreditDecrementReq UnibeeApiMerchantCreditPromoCreditDecrementReq) PromoCreditCreditPromoCreditDecrementPostRequest {
	r.unibeeApiMerchantCreditPromoCreditDecrementReq = &unibeeApiMerchantCreditPromoCreditDecrementReq
	return r
}

func (r PromoCreditCreditPromoCreditDecrementPostRequest) Execute() (*MerchantCreditPromoCreditDecrementPost200Response, *http.Response, error) {
	return r.ApiService.CreditPromoCreditDecrementPostExecute(r)
}

/*
CreditPromoCreditDecrementPost Promo Credit Decrement

Decrease user promo credit amount, the amount after decreased should greater than 0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditPromoCreditDecrementPostRequest
*/
func (a *PromoCreditService) CreditPromoCreditDecrementPost(ctx context.Context) PromoCreditCreditPromoCreditDecrementPostRequest {
	return PromoCreditCreditPromoCreditDecrementPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditPromoCreditDecrementPost200Response
func (a *PromoCreditService) CreditPromoCreditDecrementPostExecute(r PromoCreditCreditPromoCreditDecrementPostRequest) (*MerchantCreditPromoCreditDecrementPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditPromoCreditDecrementPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditPromoCreditDecrementPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/promo_credit_decrement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditPromoCreditDecrementReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditPromoCreditDecrementReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditPromoCreditDecrementReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PromoCreditCreditPromoCreditIncrementPostRequest struct {
	ctx context.Context
	ApiService *PromoCreditService
	unibeeApiMerchantCreditPromoCreditIncrementReq *UnibeeApiMerchantCreditPromoCreditIncrementReq
}

func (r PromoCreditCreditPromoCreditIncrementPostRequest) UnibeeApiMerchantCreditPromoCreditIncrementReq(unibeeApiMerchantCreditPromoCreditIncrementReq UnibeeApiMerchantCreditPromoCreditIncrementReq) PromoCreditCreditPromoCreditIncrementPostRequest {
	r.unibeeApiMerchantCreditPromoCreditIncrementReq = &unibeeApiMerchantCreditPromoCreditIncrementReq
	return r
}

func (r PromoCreditCreditPromoCreditIncrementPostRequest) Execute() (*MerchantCreditPromoCreditDecrementPost200Response, *http.Response, error) {
	return r.ApiService.CreditPromoCreditIncrementPostExecute(r)
}

/*
CreditPromoCreditIncrementPost Promo Credit Increment

Increase user promo credit amount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PromoCreditCreditPromoCreditIncrementPostRequest
*/
func (a *PromoCreditService) CreditPromoCreditIncrementPost(ctx context.Context) PromoCreditCreditPromoCreditIncrementPostRequest {
	return PromoCreditCreditPromoCreditIncrementPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantCreditPromoCreditDecrementPost200Response
func (a *PromoCreditService) CreditPromoCreditIncrementPostExecute(r PromoCreditCreditPromoCreditIncrementPostRequest) (*MerchantCreditPromoCreditDecrementPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantCreditPromoCreditDecrementPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromoCreditService.CreditPromoCreditIncrementPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/credit/promo_credit_increment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantCreditPromoCreditIncrementReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantCreditPromoCreditIncrementReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantCreditPromoCreditIncrementReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
