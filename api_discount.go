/*
OpenAPI UniBee

This is UniBee Api Server

API version: buildtime:202408060911 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DiscountService Discount service
type DiscountService service

type DiscountDiscountActivatePostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountActivateReq *UnibeeApiMerchantDiscountActivateReq
}

func (r DiscountDiscountActivatePostRequest) UnibeeApiMerchantDiscountActivateReq(unibeeApiMerchantDiscountActivateReq UnibeeApiMerchantDiscountActivateReq) DiscountDiscountActivatePostRequest {
	r.unibeeApiMerchantDiscountActivateReq = &unibeeApiMerchantDiscountActivateReq
	return r
}

func (r DiscountDiscountActivatePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.DiscountActivatePostExecute(r)
}

/*
DiscountActivatePost ActivateDiscountCode

Activate discount code, the discount code can only effect to payment or subscription after activated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountActivatePostRequest
*/
func (a *DiscountService) DiscountActivatePost(ctx context.Context) DiscountDiscountActivatePostRequest {
	return DiscountDiscountActivatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *DiscountService) DiscountActivatePostExecute(r DiscountDiscountActivatePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountActivatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/activate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountActivateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountActivateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountActivateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountDeactivatePostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountDeactivateReq *UnibeeApiMerchantDiscountDeactivateReq
}

func (r DiscountDiscountDeactivatePostRequest) UnibeeApiMerchantDiscountDeactivateReq(unibeeApiMerchantDiscountDeactivateReq UnibeeApiMerchantDiscountDeactivateReq) DiscountDiscountDeactivatePostRequest {
	r.unibeeApiMerchantDiscountDeactivateReq = &unibeeApiMerchantDiscountDeactivateReq
	return r
}

func (r DiscountDiscountDeactivatePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.DiscountDeactivatePostExecute(r)
}

/*
DiscountDeactivatePost DeactivateDiscountCode

Deactivate discount code

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountDeactivatePostRequest
*/
func (a *DiscountService) DiscountDeactivatePost(ctx context.Context) DiscountDiscountDeactivatePostRequest {
	return DiscountDiscountDeactivatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *DiscountService) DiscountDeactivatePostExecute(r DiscountDiscountDeactivatePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountDeactivatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/deactivate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountDeactivateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountDeactivateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountDeactivateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountDeletePostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountDeleteReq *UnibeeApiMerchantDiscountDeleteReq
}

func (r DiscountDiscountDeletePostRequest) UnibeeApiMerchantDiscountDeleteReq(unibeeApiMerchantDiscountDeleteReq UnibeeApiMerchantDiscountDeleteReq) DiscountDiscountDeletePostRequest {
	r.unibeeApiMerchantDiscountDeleteReq = &unibeeApiMerchantDiscountDeleteReq
	return r
}

func (r DiscountDiscountDeletePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.DiscountDeletePostExecute(r)
}

/*
DiscountDeletePost DeleteDiscountCode

Delete discount code before activate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountDeletePostRequest
*/
func (a *DiscountService) DiscountDeletePost(ctx context.Context) DiscountDiscountDeletePostRequest {
	return DiscountDiscountDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *DiscountService) DiscountDeletePostExecute(r DiscountDiscountDeletePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountDeleteReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountDeleteReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountDeleteReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountDetailGetRequest struct {
	ctx context.Context
	ApiService *DiscountService
	id *int64
}

// The discount&#39;s Id
func (r DiscountDiscountDetailGetRequest) Id(id int64) DiscountDiscountDetailGetRequest {
	r.id = &id
	return r
}

func (r DiscountDiscountDetailGetRequest) Execute() (*MerchantDiscountDetailGet200Response, *http.Response, error) {
	return r.ApiService.DiscountDetailGetExecute(r)
}

/*
DiscountDetailGet Merchant Discount Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountDetailGetRequest
*/
func (a *DiscountService) DiscountDetailGet(ctx context.Context) DiscountDiscountDetailGetRequest {
	return DiscountDiscountDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountDetailGet200Response
func (a *DiscountService) DiscountDetailGetExecute(r DiscountDiscountDetailGetRequest) (*MerchantDiscountDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountDetailPostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountDetailReq *UnibeeApiMerchantDiscountDetailReq
}

func (r DiscountDiscountDetailPostRequest) UnibeeApiMerchantDiscountDetailReq(unibeeApiMerchantDiscountDetailReq UnibeeApiMerchantDiscountDetailReq) DiscountDiscountDetailPostRequest {
	r.unibeeApiMerchantDiscountDetailReq = &unibeeApiMerchantDiscountDetailReq
	return r
}

func (r DiscountDiscountDetailPostRequest) Execute() (*MerchantDiscountDetailGet200Response, *http.Response, error) {
	return r.ApiService.DiscountDetailPostExecute(r)
}

/*
DiscountDetailPost Merchant Discount Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountDetailPostRequest
*/
func (a *DiscountService) DiscountDetailPost(ctx context.Context) DiscountDiscountDetailPostRequest {
	return DiscountDiscountDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountDetailGet200Response
func (a *DiscountService) DiscountDetailPostExecute(r DiscountDiscountDetailPostRequest) (*MerchantDiscountDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountEditPostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountEditReq *UnibeeApiMerchantDiscountEditReq
}

func (r DiscountDiscountEditPostRequest) UnibeeApiMerchantDiscountEditReq(unibeeApiMerchantDiscountEditReq UnibeeApiMerchantDiscountEditReq) DiscountDiscountEditPostRequest {
	r.unibeeApiMerchantDiscountEditReq = &unibeeApiMerchantDiscountEditReq
	return r
}

func (r DiscountDiscountEditPostRequest) Execute() (*MerchantDiscountEditPost200Response, *http.Response, error) {
	return r.ApiService.DiscountEditPostExecute(r)
}

/*
DiscountEditPost EditDiscountCode

Edit the discount code before activate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountEditPostRequest
*/
func (a *DiscountService) DiscountEditPost(ctx context.Context) DiscountDiscountEditPostRequest {
	return DiscountDiscountEditPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountEditPost200Response
func (a *DiscountService) DiscountEditPostExecute(r DiscountDiscountEditPostRequest) (*MerchantDiscountEditPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountEditPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountEditPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/edit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountEditReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountEditReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountEditReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountListGetRequest struct {
	ctx context.Context
	ApiService *DiscountService
	discountType *[]int32
	billingType *[]int32
	status *[]int32
	code *string
	currency *string
	sortField *string
	sortType *string
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// discount_type, 1-percentage, 2-fixed_amount
func (r DiscountDiscountListGetRequest) DiscountType(discountType []int32) DiscountDiscountListGetRequest {
	r.discountType = &discountType
	return r
}

// billing_type, 1-one-time, 2-recurring
func (r DiscountDiscountListGetRequest) BillingType(billingType []int32) DiscountDiscountListGetRequest {
	r.billingType = &billingType
	return r
}

// status, 1-editable, 2-active, 3-deactive, 4-expire
func (r DiscountDiscountListGetRequest) Status(status []int32) DiscountDiscountListGetRequest {
	r.status = &status
	return r
}

// Filter Code
func (r DiscountDiscountListGetRequest) Code(code string) DiscountDiscountListGetRequest {
	r.code = &code
	return r
}

// Filter Currency
func (r DiscountDiscountListGetRequest) Currency(currency string) DiscountDiscountListGetRequest {
	r.currency = &currency
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r DiscountDiscountListGetRequest) SortField(sortField string) DiscountDiscountListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r DiscountDiscountListGetRequest) SortType(sortType string) DiscountDiscountListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start 0
func (r DiscountDiscountListGetRequest) Page(page int32) DiscountDiscountListGetRequest {
	r.page = &page
	return r
}

// Count Of Per Page
func (r DiscountDiscountListGetRequest) Count(count int32) DiscountDiscountListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart
func (r DiscountDiscountListGetRequest) CreateTimeStart(createTimeStart int64) DiscountDiscountListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd
func (r DiscountDiscountListGetRequest) CreateTimeEnd(createTimeEnd int64) DiscountDiscountListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r DiscountDiscountListGetRequest) Execute() (*MerchantDiscountListGet200Response, *http.Response, error) {
	return r.ApiService.DiscountListGetExecute(r)
}

/*
DiscountListGet DiscountCodeList

Get discountCode list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountListGetRequest
*/
func (a *DiscountService) DiscountListGet(ctx context.Context) DiscountDiscountListGetRequest {
	return DiscountDiscountListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountListGet200Response
func (a *DiscountService) DiscountListGetExecute(r DiscountDiscountListGetRequest) (*MerchantDiscountListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.discountType != nil {
		t := *r.discountType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "discountType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "discountType", t, "multi")
		}
	}
	if r.billingType != nil {
		t := *r.billingType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "billingType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "billingType", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
	}
	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountNewPostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountNewReq *UnibeeApiMerchantDiscountNewReq
}

func (r DiscountDiscountNewPostRequest) UnibeeApiMerchantDiscountNewReq(unibeeApiMerchantDiscountNewReq UnibeeApiMerchantDiscountNewReq) DiscountDiscountNewPostRequest {
	r.unibeeApiMerchantDiscountNewReq = &unibeeApiMerchantDiscountNewReq
	return r
}

func (r DiscountDiscountNewPostRequest) Execute() (*MerchantDiscountEditPost200Response, *http.Response, error) {
	return r.ApiService.DiscountNewPostExecute(r)
}

/*
DiscountNewPost NewDiscountCode

Create a new discount code, code can used in onetime or subscription purchase to make discount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountNewPostRequest
*/
func (a *DiscountService) DiscountNewPost(ctx context.Context) DiscountDiscountNewPostRequest {
	return DiscountDiscountNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountEditPost200Response
func (a *DiscountService) DiscountNewPostExecute(r DiscountDiscountNewPostRequest) (*MerchantDiscountEditPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountEditPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountNewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountNewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountNewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountPlanApplyPreviewPostRequest struct {
	ctx context.Context
	ApiService *DiscountService
	unibeeApiMerchantDiscountPlanApplyPreviewReq *UnibeeApiMerchantDiscountPlanApplyPreviewReq
}

func (r DiscountDiscountPlanApplyPreviewPostRequest) UnibeeApiMerchantDiscountPlanApplyPreviewReq(unibeeApiMerchantDiscountPlanApplyPreviewReq UnibeeApiMerchantDiscountPlanApplyPreviewReq) DiscountDiscountPlanApplyPreviewPostRequest {
	r.unibeeApiMerchantDiscountPlanApplyPreviewReq = &unibeeApiMerchantDiscountPlanApplyPreviewReq
	return r
}

func (r DiscountDiscountPlanApplyPreviewPostRequest) Execute() (*MerchantDiscountPlanApplyPreviewPost200Response, *http.Response, error) {
	return r.ApiService.DiscountPlanApplyPreviewPostExecute(r)
}

/*
DiscountPlanApplyPreviewPost PlanApplyPreview

Check discount can apply to plan, Only check rules about plan，the actual usage is subject to the subscription interface

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountPlanApplyPreviewPostRequest
*/
func (a *DiscountService) DiscountPlanApplyPreviewPost(ctx context.Context) DiscountDiscountPlanApplyPreviewPostRequest {
	return DiscountDiscountPlanApplyPreviewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountPlanApplyPreviewPost200Response
func (a *DiscountService) DiscountPlanApplyPreviewPostExecute(r DiscountDiscountPlanApplyPreviewPostRequest) (*MerchantDiscountPlanApplyPreviewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountPlanApplyPreviewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountPlanApplyPreviewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/plan_apply_preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountPlanApplyPreviewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountPlanApplyPreviewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountPlanApplyPreviewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscountDiscountUserDiscountListGetRequest struct {
	ctx context.Context
	ApiService *DiscountService
	id *int64
	sortField *string
	sortType *string
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// The discount&#39;s Id
func (r DiscountDiscountUserDiscountListGetRequest) Id(id int64) DiscountDiscountUserDiscountListGetRequest {
	r.id = &id
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r DiscountDiscountUserDiscountListGetRequest) SortField(sortField string) DiscountDiscountUserDiscountListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r DiscountDiscountUserDiscountListGetRequest) SortType(sortType string) DiscountDiscountUserDiscountListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start 0
func (r DiscountDiscountUserDiscountListGetRequest) Page(page int32) DiscountDiscountUserDiscountListGetRequest {
	r.page = &page
	return r
}

// Count Of Per Page
func (r DiscountDiscountUserDiscountListGetRequest) Count(count int32) DiscountDiscountUserDiscountListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart
func (r DiscountDiscountUserDiscountListGetRequest) CreateTimeStart(createTimeStart int64) DiscountDiscountUserDiscountListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd
func (r DiscountDiscountUserDiscountListGetRequest) CreateTimeEnd(createTimeEnd int64) DiscountDiscountUserDiscountListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r DiscountDiscountUserDiscountListGetRequest) Execute() (*MerchantDiscountUserDiscountListGet200Response, *http.Response, error) {
	return r.ApiService.DiscountUserDiscountListGetExecute(r)
}

/*
DiscountUserDiscountListGet UserDiscountCodeList

Get user discountCode list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DiscountDiscountUserDiscountListGetRequest
*/
func (a *DiscountService) DiscountUserDiscountListGet(ctx context.Context) DiscountDiscountUserDiscountListGetRequest {
	return DiscountDiscountUserDiscountListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountUserDiscountListGet200Response
func (a *DiscountService) DiscountUserDiscountListGetExecute(r DiscountDiscountUserDiscountListGetRequest) (*MerchantDiscountUserDiscountListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountUserDiscountListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountService.DiscountUserDiscountListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/user_discount_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
