/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202508150435
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// UserDiscountService UserDiscount service
type UserDiscountService service

type UserDiscountDiscountPlanApplyPreviewPostRequest struct {
	ctx context.Context
	ApiService *UserDiscountService
	unibeeApiMerchantDiscountPlanApplyPreviewReq *UnibeeApiMerchantDiscountPlanApplyPreviewReq
}

func (r UserDiscountDiscountPlanApplyPreviewPostRequest) UnibeeApiMerchantDiscountPlanApplyPreviewReq(unibeeApiMerchantDiscountPlanApplyPreviewReq UnibeeApiMerchantDiscountPlanApplyPreviewReq) UserDiscountDiscountPlanApplyPreviewPostRequest {
	r.unibeeApiMerchantDiscountPlanApplyPreviewReq = &unibeeApiMerchantDiscountPlanApplyPreviewReq
	return r
}

func (r UserDiscountDiscountPlanApplyPreviewPostRequest) Execute() (*MerchantDiscountPlanApplyPreviewPost200Response, *http.Response, error) {
	return r.ApiService.DiscountPlanApplyPreviewPostExecute(r)
}

/*
DiscountPlanApplyPreviewPost Plan Apply Preview

Check discount can apply to plan, Only check rules about plan，the actual usage is subject to the subscription interface

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserDiscountDiscountPlanApplyPreviewPostRequest
*/
func (a *UserDiscountService) DiscountPlanApplyPreviewPost(ctx context.Context) UserDiscountDiscountPlanApplyPreviewPostRequest {
	return UserDiscountDiscountPlanApplyPreviewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountPlanApplyPreviewPost200Response
func (a *UserDiscountService) DiscountPlanApplyPreviewPostExecute(r UserDiscountDiscountPlanApplyPreviewPostRequest) (*MerchantDiscountPlanApplyPreviewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountPlanApplyPreviewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDiscountService.DiscountPlanApplyPreviewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/plan_apply_preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantDiscountPlanApplyPreviewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantDiscountPlanApplyPreviewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantDiscountPlanApplyPreviewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserDiscountDiscountUserDiscountListGetRequest struct {
	ctx context.Context
	ApiService *UserDiscountService
	id *int64
	userIds *[]int64
	email *string
	planIds *[]int64
	sortField *string
	sortType *string
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// The discount&#39;s Id
func (r UserDiscountDiscountUserDiscountListGetRequest) Id(id int64) UserDiscountDiscountUserDiscountListGetRequest {
	r.id = &id
	return r
}

// Filter UserIds Default All
func (r UserDiscountDiscountUserDiscountListGetRequest) UserIds(userIds []int64) UserDiscountDiscountUserDiscountListGetRequest {
	r.userIds = &userIds
	return r
}

// Filter Email Default All
func (r UserDiscountDiscountUserDiscountListGetRequest) Email(email string) UserDiscountDiscountUserDiscountListGetRequest {
	r.email = &email
	return r
}

// Filter PlanIds Default All
func (r UserDiscountDiscountUserDiscountListGetRequest) PlanIds(planIds []int64) UserDiscountDiscountUserDiscountListGetRequest {
	r.planIds = &planIds
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r UserDiscountDiscountUserDiscountListGetRequest) SortField(sortField string) UserDiscountDiscountUserDiscountListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r UserDiscountDiscountUserDiscountListGetRequest) SortType(sortType string) UserDiscountDiscountUserDiscountListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start 0
func (r UserDiscountDiscountUserDiscountListGetRequest) Page(page int32) UserDiscountDiscountUserDiscountListGetRequest {
	r.page = &page
	return r
}

// Count Of Per Page
func (r UserDiscountDiscountUserDiscountListGetRequest) Count(count int32) UserDiscountDiscountUserDiscountListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart
func (r UserDiscountDiscountUserDiscountListGetRequest) CreateTimeStart(createTimeStart int64) UserDiscountDiscountUserDiscountListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd
func (r UserDiscountDiscountUserDiscountListGetRequest) CreateTimeEnd(createTimeEnd int64) UserDiscountDiscountUserDiscountListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r UserDiscountDiscountUserDiscountListGetRequest) Execute() (*MerchantDiscountUserDiscountListGet200Response, *http.Response, error) {
	return r.ApiService.DiscountUserDiscountListGetExecute(r)
}

/*
DiscountUserDiscountListGet Get User Discount Code List

Get user discountCode list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserDiscountDiscountUserDiscountListGetRequest
*/
func (a *UserDiscountService) DiscountUserDiscountListGet(ctx context.Context) UserDiscountDiscountUserDiscountListGetRequest {
	return UserDiscountDiscountUserDiscountListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantDiscountUserDiscountListGet200Response
func (a *UserDiscountService) DiscountUserDiscountListGetExecute(r UserDiscountDiscountUserDiscountListGetRequest) (*MerchantDiscountUserDiscountListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantDiscountUserDiscountListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDiscountService.DiscountUserDiscountListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/discount/user_discount_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	if r.userIds != nil {
		t := *r.userIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", t, "multi")
		}
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.planIds != nil {
		t := *r.planIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "planIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "planIds", t, "multi")
		}
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
