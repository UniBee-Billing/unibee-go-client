/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202508041414
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
)

// checks if the MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData{}

// MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData struct for MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData
type MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData struct {
	Invoice *UnibeeApiBeanInvoice `json:"invoice,omitempty"`
	Subscription *UnibeeApiBeanSubscription `json:"subscription,omitempty"`
	SubscriptionPendingUpdate *UnibeeApiBeanDetailSubscriptionPendingUpdateDetail `json:"subscriptionPendingUpdate,omitempty"`
}

// NewMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData instantiates a new MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData() *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData {
	this := MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData{}
	return &this
}

// NewMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseDataWithDefaults instantiates a new MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseDataWithDefaults() *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData {
	this := MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData{}
	return &this
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) GetInvoice() UnibeeApiBeanInvoice {
	if o == nil || IsNil(o.Invoice) {
		var ret UnibeeApiBeanInvoice
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) GetInvoiceOk() (*UnibeeApiBeanInvoice, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given UnibeeApiBeanInvoice and assigns it to the Invoice field.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) SetInvoice(v UnibeeApiBeanInvoice) {
	o.Invoice = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) GetSubscription() UnibeeApiBeanSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret UnibeeApiBeanSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) GetSubscriptionOk() (*UnibeeApiBeanSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given UnibeeApiBeanSubscription and assigns it to the Subscription field.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) SetSubscription(v UnibeeApiBeanSubscription) {
	o.Subscription = &v
}

// GetSubscriptionPendingUpdate returns the SubscriptionPendingUpdate field value if set, zero value otherwise.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) GetSubscriptionPendingUpdate() UnibeeApiBeanDetailSubscriptionPendingUpdateDetail {
	if o == nil || IsNil(o.SubscriptionPendingUpdate) {
		var ret UnibeeApiBeanDetailSubscriptionPendingUpdateDetail
		return ret
	}
	return *o.SubscriptionPendingUpdate
}

// GetSubscriptionPendingUpdateOk returns a tuple with the SubscriptionPendingUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) GetSubscriptionPendingUpdateOk() (*UnibeeApiBeanDetailSubscriptionPendingUpdateDetail, bool) {
	if o == nil || IsNil(o.SubscriptionPendingUpdate) {
		return nil, false
	}
	return o.SubscriptionPendingUpdate, true
}

// HasSubscriptionPendingUpdate returns a boolean if a field has been set.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) HasSubscriptionPendingUpdate() bool {
	if o != nil && !IsNil(o.SubscriptionPendingUpdate) {
		return true
	}

	return false
}

// SetSubscriptionPendingUpdate gets a reference to the given UnibeeApiBeanDetailSubscriptionPendingUpdateDetail and assigns it to the SubscriptionPendingUpdate field.
func (o *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) SetSubscriptionPendingUpdate(v UnibeeApiBeanDetailSubscriptionPendingUpdateDetail) {
	o.SubscriptionPendingUpdate = &v
}

func (o MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.SubscriptionPendingUpdate) {
		toSerialize["subscriptionPendingUpdate"] = o.SubscriptionPendingUpdate
	}
	return toSerialize, nil
}

type NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData struct {
	value *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData
	isSet bool
}

func (v NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) Get() *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData {
	return v.value
}

func (v *NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) Set(val *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData(val *MerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) *NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData {
	return &NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData{value: val, isSet: true}
}

func (v NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantSubscriptionApplySubscriptionNextInvoicePost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


