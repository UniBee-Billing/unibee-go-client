/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202509191247
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
)

// checks if the UnibeeApiBeanGroupPlanSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeApiBeanGroupPlanSelector{}

// UnibeeApiBeanGroupPlanSelector struct for UnibeeApiBeanGroupPlanSelector
type UnibeeApiBeanGroupPlanSelector struct {
	Currency []string `json:"currency,omitempty"`
	GroupPlanIntervalSelector []UnibeeApiBeanGroupPlanIntervalSelector `json:"groupPlanIntervalSelector,omitempty"`
	// 1-main planï¼Œ2-addon plan,3-onetime
	Type []int32 `json:"type,omitempty"`
}

// NewUnibeeApiBeanGroupPlanSelector instantiates a new UnibeeApiBeanGroupPlanSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeApiBeanGroupPlanSelector() *UnibeeApiBeanGroupPlanSelector {
	this := UnibeeApiBeanGroupPlanSelector{}
	return &this
}

// NewUnibeeApiBeanGroupPlanSelectorWithDefaults instantiates a new UnibeeApiBeanGroupPlanSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeApiBeanGroupPlanSelectorWithDefaults() *UnibeeApiBeanGroupPlanSelector {
	this := UnibeeApiBeanGroupPlanSelector{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UnibeeApiBeanGroupPlanSelector) GetCurrency() []string {
	if o == nil || IsNil(o.Currency) {
		var ret []string
		return ret
	}
	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiBeanGroupPlanSelector) GetCurrencyOk() ([]string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnibeeApiBeanGroupPlanSelector) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given []string and assigns it to the Currency field.
func (o *UnibeeApiBeanGroupPlanSelector) SetCurrency(v []string) {
	o.Currency = v
}

// GetGroupPlanIntervalSelector returns the GroupPlanIntervalSelector field value if set, zero value otherwise.
func (o *UnibeeApiBeanGroupPlanSelector) GetGroupPlanIntervalSelector() []UnibeeApiBeanGroupPlanIntervalSelector {
	if o == nil || IsNil(o.GroupPlanIntervalSelector) {
		var ret []UnibeeApiBeanGroupPlanIntervalSelector
		return ret
	}
	return o.GroupPlanIntervalSelector
}

// GetGroupPlanIntervalSelectorOk returns a tuple with the GroupPlanIntervalSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiBeanGroupPlanSelector) GetGroupPlanIntervalSelectorOk() ([]UnibeeApiBeanGroupPlanIntervalSelector, bool) {
	if o == nil || IsNil(o.GroupPlanIntervalSelector) {
		return nil, false
	}
	return o.GroupPlanIntervalSelector, true
}

// HasGroupPlanIntervalSelector returns a boolean if a field has been set.
func (o *UnibeeApiBeanGroupPlanSelector) HasGroupPlanIntervalSelector() bool {
	if o != nil && !IsNil(o.GroupPlanIntervalSelector) {
		return true
	}

	return false
}

// SetGroupPlanIntervalSelector gets a reference to the given []UnibeeApiBeanGroupPlanIntervalSelector and assigns it to the GroupPlanIntervalSelector field.
func (o *UnibeeApiBeanGroupPlanSelector) SetGroupPlanIntervalSelector(v []UnibeeApiBeanGroupPlanIntervalSelector) {
	o.GroupPlanIntervalSelector = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UnibeeApiBeanGroupPlanSelector) GetType() []int32 {
	if o == nil || IsNil(o.Type) {
		var ret []int32
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiBeanGroupPlanSelector) GetTypeOk() ([]int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UnibeeApiBeanGroupPlanSelector) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []int32 and assigns it to the Type field.
func (o *UnibeeApiBeanGroupPlanSelector) SetType(v []int32) {
	o.Type = v
}

func (o UnibeeApiBeanGroupPlanSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeApiBeanGroupPlanSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.GroupPlanIntervalSelector) {
		toSerialize["groupPlanIntervalSelector"] = o.GroupPlanIntervalSelector
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUnibeeApiBeanGroupPlanSelector struct {
	value *UnibeeApiBeanGroupPlanSelector
	isSet bool
}

func (v NullableUnibeeApiBeanGroupPlanSelector) Get() *UnibeeApiBeanGroupPlanSelector {
	return v.value
}

func (v *NullableUnibeeApiBeanGroupPlanSelector) Set(val *UnibeeApiBeanGroupPlanSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeApiBeanGroupPlanSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeApiBeanGroupPlanSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeApiBeanGroupPlanSelector(val *UnibeeApiBeanGroupPlanSelector) *NullableUnibeeApiBeanGroupPlanSelector {
	return &NullableUnibeeApiBeanGroupPlanSelector{value: val, isSet: true}
}

func (v NullableUnibeeApiBeanGroupPlanSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeApiBeanGroupPlanSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


