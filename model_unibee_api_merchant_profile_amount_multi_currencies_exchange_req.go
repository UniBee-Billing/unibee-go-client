/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202509191247
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq{}

// UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq struct for UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq
type UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq struct {
	// Amount
	Amount int64 `json:"amount"`
	// The Default Currency
	Currency string `json:"currency"`
}

type _UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq

// NewUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq instantiates a new UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq(amount int64, currency string) *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq {
	this := UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq{}
	this.Amount = amount
	this.Currency = currency
	return &this
}

// NewUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReqWithDefaults instantiates a new UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReqWithDefaults() *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq {
	this := UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq{}
	return &this
}

// GetAmount returns the Amount field value
func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) SetAmount(v int64) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) SetCurrency(v string) {
	o.Currency = v
}

func (o UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	return toSerialize, nil
}

func (o *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq := _UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq)

	if err != nil {
		return err
	}

	*o = UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq(varUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq)

	return err
}

type NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq struct {
	value *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq
	isSet bool
}

func (v NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) Get() *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq {
	return v.value
}

func (v *NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) Set(val *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq(val *UnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) *NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq {
	return &NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq{value: val, isSet: true}
}

func (v NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeApiMerchantProfileAmountMultiCurrenciesExchangeReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


