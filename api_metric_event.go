/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202510192014
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// MetricEventService MetricEvent service
type MetricEventService service

type MetricEventMetricEventDeletePostRequest struct {
	ctx context.Context
	ApiService *MetricEventService
	unibeeApiMerchantMetricDeleteEventReq *UnibeeApiMerchantMetricDeleteEventReq
}

func (r MetricEventMetricEventDeletePostRequest) UnibeeApiMerchantMetricDeleteEventReq(unibeeApiMerchantMetricDeleteEventReq UnibeeApiMerchantMetricDeleteEventReq) MetricEventMetricEventDeletePostRequest {
	r.unibeeApiMerchantMetricDeleteEventReq = &unibeeApiMerchantMetricDeleteEventReq
	return r
}

func (r MetricEventMetricEventDeletePostRequest) Execute() (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	return r.ApiService.MetricEventDeletePostExecute(r)
}

/*
MetricEventDeletePost Del Merchant Metric Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MetricEventMetricEventDeletePostRequest
*/
func (a *MetricEventService) MetricEventDeletePost(ctx context.Context) MetricEventMetricEventDeletePostRequest {
	return MetricEventMetricEventDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoClearTotpPost200Response
func (a *MetricEventService) MetricEventDeletePostExecute(r MetricEventMetricEventDeletePostRequest) (*MerchantAuthSsoClearTotpPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoClearTotpPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricEventService.MetricEventDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricDeleteEventReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricDeleteEventReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricDeleteEventReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MetricEventMetricEventListGetRequest struct {
	ctx context.Context
	ApiService *MetricEventService
	userIds *[]int64
	metricIds *[]int64
	sortField *string
	sortType *string
	page *int32
	count *int32
	createTimeStart *int64
	createTimeEnd *int64
}

// Filter UserIds, Default All
func (r MetricEventMetricEventListGetRequest) UserIds(userIds []int64) MetricEventMetricEventListGetRequest {
	r.userIds = &userIds
	return r
}

// Filter MetricIds, Default All
func (r MetricEventMetricEventListGetRequest) MetricIds(metricIds []int64) MetricEventMetricEventListGetRequest {
	r.metricIds = &metricIds
	return r
}

// Sort，user_id|gmt_create，Default gmt_create
func (r MetricEventMetricEventListGetRequest) SortField(sortField string) MetricEventMetricEventListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r MetricEventMetricEventListGetRequest) SortType(sortType string) MetricEventMetricEventListGetRequest {
	r.sortType = &sortType
	return r
}

// Page,Start 0
func (r MetricEventMetricEventListGetRequest) Page(page int32) MetricEventMetricEventListGetRequest {
	r.page = &page
	return r
}

// Count OF Page
func (r MetricEventMetricEventListGetRequest) Count(count int32) MetricEventMetricEventListGetRequest {
	r.count = &count
	return r
}

// CreateTimeStart，UTC timestamp，seconds
func (r MetricEventMetricEventListGetRequest) CreateTimeStart(createTimeStart int64) MetricEventMetricEventListGetRequest {
	r.createTimeStart = &createTimeStart
	return r
}

// CreateTimeEnd，UTC timestamp，seconds
func (r MetricEventMetricEventListGetRequest) CreateTimeEnd(createTimeEnd int64) MetricEventMetricEventListGetRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r MetricEventMetricEventListGetRequest) Execute() (*MerchantMetricEventListGet200Response, *http.Response, error) {
	return r.ApiService.MetricEventListGetExecute(r)
}

/*
MetricEventListGet Metric Event List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MetricEventMetricEventListGetRequest
*/
func (a *MetricEventService) MetricEventListGet(ctx context.Context) MetricEventMetricEventListGetRequest {
	return MetricEventMetricEventListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventListGet200Response
func (a *MetricEventService) MetricEventListGetExecute(r MetricEventMetricEventListGetRequest) (*MerchantMetricEventListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricEventService.MetricEventListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userIds != nil {
		t := *r.userIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", t, "multi")
		}
	}
	if r.metricIds != nil {
		t := *r.metricIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metricIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metricIds", t, "multi")
		}
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeEnd", r.createTimeEnd, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MetricEventMetricEventListPostRequest struct {
	ctx context.Context
	ApiService *MetricEventService
	unibeeApiMerchantMetricEventListReq *UnibeeApiMerchantMetricEventListReq
}

func (r MetricEventMetricEventListPostRequest) UnibeeApiMerchantMetricEventListReq(unibeeApiMerchantMetricEventListReq UnibeeApiMerchantMetricEventListReq) MetricEventMetricEventListPostRequest {
	r.unibeeApiMerchantMetricEventListReq = &unibeeApiMerchantMetricEventListReq
	return r
}

func (r MetricEventMetricEventListPostRequest) Execute() (*MerchantMetricEventListGet200Response, *http.Response, error) {
	return r.ApiService.MetricEventListPostExecute(r)
}

/*
MetricEventListPost Metric Event List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MetricEventMetricEventListPostRequest
*/
func (a *MetricEventService) MetricEventListPost(ctx context.Context) MetricEventMetricEventListPostRequest {
	return MetricEventMetricEventListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventListGet200Response
func (a *MetricEventService) MetricEventListPostExecute(r MetricEventMetricEventListPostRequest) (*MerchantMetricEventListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricEventService.MetricEventListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricEventListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricEventListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricEventListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MetricEventMetricEventNewPostRequest struct {
	ctx context.Context
	ApiService *MetricEventService
	unibeeApiMerchantMetricNewEventReq *UnibeeApiMerchantMetricNewEventReq
}

func (r MetricEventMetricEventNewPostRequest) UnibeeApiMerchantMetricNewEventReq(unibeeApiMerchantMetricNewEventReq UnibeeApiMerchantMetricNewEventReq) MetricEventMetricEventNewPostRequest {
	r.unibeeApiMerchantMetricNewEventReq = &unibeeApiMerchantMetricNewEventReq
	return r
}

func (r MetricEventMetricEventNewPostRequest) Execute() (*MerchantMetricEventNewPost200Response, *http.Response, error) {
	return r.ApiService.MetricEventNewPostExecute(r)
}

/*
MetricEventNewPost New Merchant Metric Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MetricEventMetricEventNewPostRequest
*/
func (a *MetricEventService) MetricEventNewPost(ctx context.Context) MetricEventMetricEventNewPostRequest {
	return MetricEventMetricEventNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventNewPost200Response
func (a *MetricEventService) MetricEventNewPostExecute(r MetricEventMetricEventNewPostRequest) (*MerchantMetricEventNewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventNewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricEventService.MetricEventNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricNewEventReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricNewEventReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricNewEventReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
