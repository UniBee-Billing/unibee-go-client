/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202502100809
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// GatewayService Gateway service
type GatewayService service

type GatewayGatewayArchivePostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayArchiveReq *UnibeeApiMerchantGatewayArchiveReq
}

func (r GatewayGatewayArchivePostRequest) UnibeeApiMerchantGatewayArchiveReq(unibeeApiMerchantGatewayArchiveReq UnibeeApiMerchantGatewayArchiveReq) GatewayGatewayArchivePostRequest {
	r.unibeeApiMerchantGatewayArchiveReq = &unibeeApiMerchantGatewayArchiveReq
	return r
}

func (r GatewayGatewayArchivePostRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewayArchivePostExecute(r)
}

/*
GatewayArchivePost Payment Gateway Archive

Archive the exist payment gatewayï¼Œavailable for setup new one, the old user continue using the old gateway

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayArchivePostRequest
*/
func (a *GatewayService) GatewayArchivePost(ctx context.Context) GatewayGatewayArchivePostRequest {
	return GatewayGatewayArchivePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewayArchivePostExecute(r GatewayGatewayArchivePostRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayArchivePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayArchiveReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayArchiveReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayArchiveReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayDetailGetRequest struct {
	ctx context.Context
	ApiService *GatewayService
	gatewayId *int32
	gatewayName *string
}

// The id of payment gateway, either gatewayId or gatewayName
func (r GatewayGatewayDetailGetRequest) GatewayId(gatewayId int32) GatewayGatewayDetailGetRequest {
	r.gatewayId = &gatewayId
	return r
}

// The name of payment gateway, , either gatewayId or gatewayName, stripe|paypal|changelly|unitpay|payssion|cryptadium
func (r GatewayGatewayDetailGetRequest) GatewayName(gatewayName string) GatewayGatewayDetailGetRequest {
	r.gatewayName = &gatewayName
	return r
}

func (r GatewayGatewayDetailGetRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewayDetailGetExecute(r)
}

/*
GatewayDetailGet Payment Gateway

Get Payment Gateway Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayDetailGetRequest
*/
func (a *GatewayService) GatewayDetailGet(ctx context.Context) GatewayGatewayDetailGetRequest {
	return GatewayGatewayDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewayDetailGetExecute(r GatewayGatewayDetailGetRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gatewayId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gatewayId", r.gatewayId, "")
	}
	if r.gatewayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gatewayName", r.gatewayName, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayDetailPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayDetailReq *UnibeeApiMerchantGatewayDetailReq
}

func (r GatewayGatewayDetailPostRequest) UnibeeApiMerchantGatewayDetailReq(unibeeApiMerchantGatewayDetailReq UnibeeApiMerchantGatewayDetailReq) GatewayGatewayDetailPostRequest {
	r.unibeeApiMerchantGatewayDetailReq = &unibeeApiMerchantGatewayDetailReq
	return r
}

func (r GatewayGatewayDetailPostRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewayDetailPostExecute(r)
}

/*
GatewayDetailPost Payment Gateway

Get Payment Gateway Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayDetailPostRequest
*/
func (a *GatewayService) GatewayDetailPost(ctx context.Context) GatewayGatewayDetailPostRequest {
	return GatewayGatewayDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewayDetailPostExecute(r GatewayGatewayDetailPostRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayEditCountryConfigPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayEditCountryConfigReq *UnibeeApiMerchantGatewayEditCountryConfigReq
}

func (r GatewayGatewayEditCountryConfigPostRequest) UnibeeApiMerchantGatewayEditCountryConfigReq(unibeeApiMerchantGatewayEditCountryConfigReq UnibeeApiMerchantGatewayEditCountryConfigReq) GatewayGatewayEditCountryConfigPostRequest {
	r.unibeeApiMerchantGatewayEditCountryConfigReq = &unibeeApiMerchantGatewayEditCountryConfigReq
	return r
}

func (r GatewayGatewayEditCountryConfigPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.GatewayEditCountryConfigPostExecute(r)
}

/*
GatewayEditCountryConfigPost Payment Gateway Country Config Edit

Edit country config for payment gateway, to enable or disable the payment for countryCode, default is enable

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayEditCountryConfigPostRequest
*/
func (a *GatewayService) GatewayEditCountryConfigPost(ctx context.Context) GatewayGatewayEditCountryConfigPostRequest {
	return GatewayGatewayEditCountryConfigPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *GatewayService) GatewayEditCountryConfigPostExecute(r GatewayGatewayEditCountryConfigPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayEditCountryConfigPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/edit_country_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayEditCountryConfigReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayEditCountryConfigReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayEditCountryConfigReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayEditPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayEditReq *UnibeeApiMerchantGatewayEditReq
}

func (r GatewayGatewayEditPostRequest) UnibeeApiMerchantGatewayEditReq(unibeeApiMerchantGatewayEditReq UnibeeApiMerchantGatewayEditReq) GatewayGatewayEditPostRequest {
	r.unibeeApiMerchantGatewayEditReq = &unibeeApiMerchantGatewayEditReq
	return r
}

func (r GatewayGatewayEditPostRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewayEditPostExecute(r)
}

/*
GatewayEditPost Payment Gateway Edit

Edit the exist payment gateway

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayEditPostRequest
*/
func (a *GatewayService) GatewayEditPost(ctx context.Context) GatewayGatewayEditPostRequest {
	return GatewayGatewayEditPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewayEditPostExecute(r GatewayGatewayEditPostRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayEditPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/edit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayEditReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayEditReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayEditReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayEditSortPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayEditSortReq *UnibeeApiMerchantGatewayEditSortReq
}

func (r GatewayGatewayEditSortPostRequest) UnibeeApiMerchantGatewayEditSortReq(unibeeApiMerchantGatewayEditSortReq UnibeeApiMerchantGatewayEditSortReq) GatewayGatewayEditSortPostRequest {
	r.unibeeApiMerchantGatewayEditSortReq = &unibeeApiMerchantGatewayEditSortReq
	return r
}

func (r GatewayGatewayEditSortPostRequest) Execute() (*MerchantGatewayEditSortPost200Response, *http.Response, error) {
	return r.ApiService.GatewayEditSortPostExecute(r)
}

/*
GatewayEditSortPost Edit Payment Gateway Sort

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayEditSortPostRequest
*/
func (a *GatewayService) GatewayEditSortPost(ctx context.Context) GatewayGatewayEditSortPostRequest {
	return GatewayGatewayEditSortPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayEditSortPost200Response
func (a *GatewayService) GatewayEditSortPostExecute(r GatewayGatewayEditSortPostRequest) (*MerchantGatewayEditSortPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayEditSortPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayEditSortPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/edit_sort"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayEditSortReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayEditSortReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayEditSortReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayListGetRequest struct {
	ctx context.Context
	ApiService *GatewayService
	archive *bool
}

// Filter archive gateway or not, default all
func (r GatewayGatewayListGetRequest) Archive(archive bool) GatewayGatewayListGetRequest {
	r.archive = &archive
	return r
}

func (r GatewayGatewayListGetRequest) Execute() (*MerchantGatewayListGet200Response, *http.Response, error) {
	return r.ApiService.GatewayListGetExecute(r)
}

/*
GatewayListGet Get Payment Gateway List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayListGetRequest
*/
func (a *GatewayService) GatewayListGet(ctx context.Context) GatewayGatewayListGetRequest {
	return GatewayGatewayListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayListGet200Response
func (a *GatewayService) GatewayListGetExecute(r GatewayGatewayListGetRequest) (*MerchantGatewayListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archive", r.archive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewaySetupExchangeRateApiPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewaySetupExchangeApiReq *UnibeeApiMerchantGatewaySetupExchangeApiReq
}

func (r GatewayGatewaySetupExchangeRateApiPostRequest) UnibeeApiMerchantGatewaySetupExchangeApiReq(unibeeApiMerchantGatewaySetupExchangeApiReq UnibeeApiMerchantGatewaySetupExchangeApiReq) GatewayGatewaySetupExchangeRateApiPostRequest {
	r.unibeeApiMerchantGatewaySetupExchangeApiReq = &unibeeApiMerchantGatewaySetupExchangeApiReq
	return r
}

func (r GatewayGatewaySetupExchangeRateApiPostRequest) Execute() (*MerchantGatewaySetupExchangeRateApiPost200Response, *http.Response, error) {
	return r.ApiService.GatewaySetupExchangeRateApiPostExecute(r)
}

/*
GatewaySetupExchangeRateApiPost Exchange Rate Api Setup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewaySetupExchangeRateApiPostRequest
*/
func (a *GatewayService) GatewaySetupExchangeRateApiPost(ctx context.Context) GatewayGatewaySetupExchangeRateApiPostRequest {
	return GatewayGatewaySetupExchangeRateApiPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewaySetupExchangeRateApiPost200Response
func (a *GatewayService) GatewaySetupExchangeRateApiPostExecute(r GatewayGatewaySetupExchangeRateApiPostRequest) (*MerchantGatewaySetupExchangeRateApiPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewaySetupExchangeRateApiPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewaySetupExchangeRateApiPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/setup_exchange_rate_api"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewaySetupExchangeApiReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewaySetupExchangeApiReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewaySetupExchangeApiReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewaySetupListGetRequest struct {
	ctx context.Context
	ApiService *GatewayService
}

func (r GatewayGatewaySetupListGetRequest) Execute() (*MerchantGatewayEditSortPost200Response, *http.Response, error) {
	return r.ApiService.GatewaySetupListGetExecute(r)
}

/*
GatewaySetupListGet Get Payment Gateway Setup List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewaySetupListGetRequest
*/
func (a *GatewayService) GatewaySetupListGet(ctx context.Context) GatewayGatewaySetupListGetRequest {
	return GatewayGatewaySetupListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayEditSortPost200Response
func (a *GatewayService) GatewaySetupListGetExecute(r GatewayGatewaySetupListGetRequest) (*MerchantGatewayEditSortPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayEditSortPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewaySetupListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/setup_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewaySetupPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewaySetupReq *UnibeeApiMerchantGatewaySetupReq
}

func (r GatewayGatewaySetupPostRequest) UnibeeApiMerchantGatewaySetupReq(unibeeApiMerchantGatewaySetupReq UnibeeApiMerchantGatewaySetupReq) GatewayGatewaySetupPostRequest {
	r.unibeeApiMerchantGatewaySetupReq = &unibeeApiMerchantGatewaySetupReq
	return r
}

func (r GatewayGatewaySetupPostRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewaySetupPostExecute(r)
}

/*
GatewaySetupPost Payment Gateway Setup

Setup Payment gateway

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewaySetupPostRequest
*/
func (a *GatewayService) GatewaySetupPost(ctx context.Context) GatewayGatewaySetupPostRequest {
	return GatewayGatewaySetupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewaySetupPostExecute(r GatewayGatewaySetupPostRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewaySetupPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewaySetupReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewaySetupReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewaySetupReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewaySetupWebhookPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewaySetupWebhookReq *UnibeeApiMerchantGatewaySetupWebhookReq
}

func (r GatewayGatewaySetupWebhookPostRequest) UnibeeApiMerchantGatewaySetupWebhookReq(unibeeApiMerchantGatewaySetupWebhookReq UnibeeApiMerchantGatewaySetupWebhookReq) GatewayGatewaySetupWebhookPostRequest {
	r.unibeeApiMerchantGatewaySetupWebhookReq = &unibeeApiMerchantGatewaySetupWebhookReq
	return r
}

func (r GatewayGatewaySetupWebhookPostRequest) Execute() (*MerchantGatewaySetupWebhookPost200Response, *http.Response, error) {
	return r.ApiService.GatewaySetupWebhookPostExecute(r)
}

/*
GatewaySetupWebhookPost Payment Gateway Webhook Setup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewaySetupWebhookPostRequest
*/
func (a *GatewayService) GatewaySetupWebhookPost(ctx context.Context) GatewayGatewaySetupWebhookPostRequest {
	return GatewayGatewaySetupWebhookPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewaySetupWebhookPost200Response
func (a *GatewayService) GatewaySetupWebhookPostExecute(r GatewayGatewaySetupWebhookPostRequest) (*MerchantGatewaySetupWebhookPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewaySetupWebhookPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewaySetupWebhookPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/setup_webhook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewaySetupWebhookReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewaySetupWebhookReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewaySetupWebhookReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayWireTransferEditPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayWireTransferEditReq *UnibeeApiMerchantGatewayWireTransferEditReq
}

func (r GatewayGatewayWireTransferEditPostRequest) UnibeeApiMerchantGatewayWireTransferEditReq(unibeeApiMerchantGatewayWireTransferEditReq UnibeeApiMerchantGatewayWireTransferEditReq) GatewayGatewayWireTransferEditPostRequest {
	r.unibeeApiMerchantGatewayWireTransferEditReq = &unibeeApiMerchantGatewayWireTransferEditReq
	return r
}

func (r GatewayGatewayWireTransferEditPostRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewayWireTransferEditPostExecute(r)
}

/*
GatewayWireTransferEditPost Wire Transfer Edit

Edit the wire transfer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayWireTransferEditPostRequest
*/
func (a *GatewayService) GatewayWireTransferEditPost(ctx context.Context) GatewayGatewayWireTransferEditPostRequest {
	return GatewayGatewayWireTransferEditPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewayWireTransferEditPostExecute(r GatewayGatewayWireTransferEditPostRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayWireTransferEditPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/wire_transfer_edit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayWireTransferEditReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayWireTransferEditReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayWireTransferEditReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayGatewayWireTransferSetupPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantGatewayWireTransferSetupReq *UnibeeApiMerchantGatewayWireTransferSetupReq
}

func (r GatewayGatewayWireTransferSetupPostRequest) UnibeeApiMerchantGatewayWireTransferSetupReq(unibeeApiMerchantGatewayWireTransferSetupReq UnibeeApiMerchantGatewayWireTransferSetupReq) GatewayGatewayWireTransferSetupPostRequest {
	r.unibeeApiMerchantGatewayWireTransferSetupReq = &unibeeApiMerchantGatewayWireTransferSetupReq
	return r
}

func (r GatewayGatewayWireTransferSetupPostRequest) Execute() (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	return r.ApiService.GatewayWireTransferSetupPostExecute(r)
}

/*
GatewayWireTransferSetupPost Wire Transfer Setup

Setup the wire transfer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayGatewayWireTransferSetupPostRequest
*/
func (a *GatewayService) GatewayWireTransferSetupPost(ctx context.Context) GatewayGatewayWireTransferSetupPostRequest {
	return GatewayGatewayWireTransferSetupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGatewayArchivePost200Response
func (a *GatewayService) GatewayWireTransferSetupPostExecute(r GatewayGatewayWireTransferSetupPostRequest) (*MerchantGatewayArchivePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGatewayArchivePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.GatewayWireTransferSetupPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/gateway/wire_transfer_setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantGatewayWireTransferSetupReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantGatewayWireTransferSetupReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantGatewayWireTransferSetupReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GatewayTrackSetupSegmentPostRequest struct {
	ctx context.Context
	ApiService *GatewayService
	unibeeApiMerchantTrackSetupSegmentReq *UnibeeApiMerchantTrackSetupSegmentReq
}

func (r GatewayTrackSetupSegmentPostRequest) UnibeeApiMerchantTrackSetupSegmentReq(unibeeApiMerchantTrackSetupSegmentReq UnibeeApiMerchantTrackSetupSegmentReq) GatewayTrackSetupSegmentPostRequest {
	r.unibeeApiMerchantTrackSetupSegmentReq = &unibeeApiMerchantTrackSetupSegmentReq
	return r
}

func (r GatewayTrackSetupSegmentPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.TrackSetupSegmentPostExecute(r)
}

/*
TrackSetupSegmentPost Segment Setup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GatewayTrackSetupSegmentPostRequest
*/
func (a *GatewayService) TrackSetupSegmentPost(ctx context.Context) GatewayTrackSetupSegmentPostRequest {
	return GatewayTrackSetupSegmentPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *GatewayService) TrackSetupSegmentPostExecute(r GatewayTrackSetupSegmentPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewayService.TrackSetupSegmentPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/track/setup_segment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantTrackSetupSegmentReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantTrackSetupSegmentReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantTrackSetupSegmentReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
