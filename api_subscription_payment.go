/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202510192014
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SubscriptionPaymentService SubscriptionPayment service
type SubscriptionPaymentService service

type SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionPaymentService
	unibeeApiMerchantSubscriptionOnetimeAddonNewReq *UnibeeApiMerchantSubscriptionOnetimeAddonNewReq
}

func (r SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest) UnibeeApiMerchantSubscriptionOnetimeAddonNewReq(unibeeApiMerchantSubscriptionOnetimeAddonNewReq UnibeeApiMerchantSubscriptionOnetimeAddonNewReq) SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest {
	r.unibeeApiMerchantSubscriptionOnetimeAddonNewReq = &unibeeApiMerchantSubscriptionOnetimeAddonNewReq
	return r
}

func (r SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest) Execute() (*MerchantSubscriptionNewOnetimeAddonPaymentPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionNewOnetimeAddonPaymentPostExecute(r)
}

/*
SubscriptionNewOnetimeAddonPaymentPost New Subscription Onetime Addon Payment

Create payment for subscription onetime addon purchase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest
*/
func (a *SubscriptionPaymentService) SubscriptionNewOnetimeAddonPaymentPost(ctx context.Context) SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest {
	return SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionNewOnetimeAddonPaymentPost200Response
func (a *SubscriptionPaymentService) SubscriptionNewOnetimeAddonPaymentPostExecute(r SubscriptionPaymentSubscriptionNewOnetimeAddonPaymentPostRequest) (*MerchantSubscriptionNewOnetimeAddonPaymentPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionNewOnetimeAddonPaymentPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPaymentService.SubscriptionNewOnetimeAddonPaymentPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/new_onetime_addon_payment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionOnetimeAddonNewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionOnetimeAddonNewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionOnetimeAddonNewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionPaymentService
	unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq *UnibeeApiMerchantSubscriptionOnetimeAddonPreviewReq
}

func (r SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest) UnibeeApiMerchantSubscriptionOnetimeAddonPreviewReq(unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq UnibeeApiMerchantSubscriptionOnetimeAddonPreviewReq) SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest {
	r.unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq = &unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq
	return r
}

func (r SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest) Execute() (*MerchantSubscriptionNewOnetimeAddonPreviewPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionNewOnetimeAddonPreviewPostExecute(r)
}

/*
SubscriptionNewOnetimeAddonPreviewPost New Subscription Onetime Addon Preview

Preview for subscription onetime addon purchase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest
*/
func (a *SubscriptionPaymentService) SubscriptionNewOnetimeAddonPreviewPost(ctx context.Context) SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest {
	return SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionNewOnetimeAddonPreviewPost200Response
func (a *SubscriptionPaymentService) SubscriptionNewOnetimeAddonPreviewPostExecute(r SubscriptionPaymentSubscriptionNewOnetimeAddonPreviewPostRequest) (*MerchantSubscriptionNewOnetimeAddonPreviewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionNewOnetimeAddonPreviewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPaymentService.SubscriptionNewOnetimeAddonPreviewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/new_onetime_addon_preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionOnetimeAddonPreviewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest struct {
	ctx context.Context
	ApiService *SubscriptionPaymentService
	userId *int64
	page *int32
	count *int32
}

// UserId
func (r SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest) UserId(userId int64) SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest {
	r.userId = &userId
	return r
}

// Page, Start With 0
func (r SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest) Page(page int32) SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest {
	r.page = &page
	return r
}

// Count Of Page，Default 100 
func (r SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest) Count(count int32) SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest {
	r.count = &count
	return r
}

func (r SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest) Execute() (*MerchantSubscriptionOnetimeAddonPurchaseListGet200Response, *http.Response, error) {
	return r.ApiService.SubscriptionOnetimeAddonPurchaseListGetExecute(r)
}

/*
SubscriptionOnetimeAddonPurchaseListGet Get Subscription Onetime Addon Purchase History List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest
*/
func (a *SubscriptionPaymentService) SubscriptionOnetimeAddonPurchaseListGet(ctx context.Context) SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest {
	return SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionOnetimeAddonPurchaseListGet200Response
func (a *SubscriptionPaymentService) SubscriptionOnetimeAddonPurchaseListGetExecute(r SubscriptionPaymentSubscriptionOnetimeAddonPurchaseListGetRequest) (*MerchantSubscriptionOnetimeAddonPurchaseListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionOnetimeAddonPurchaseListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPaymentService.SubscriptionOnetimeAddonPurchaseListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/onetime_addon_purchase_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionPaymentSubscriptionPaymentNewPostRequest struct {
	ctx context.Context
	ApiService *SubscriptionPaymentService
	unibeeApiMerchantSubscriptionNewPaymentReq *UnibeeApiMerchantSubscriptionNewPaymentReq
}

func (r SubscriptionPaymentSubscriptionPaymentNewPostRequest) UnibeeApiMerchantSubscriptionNewPaymentReq(unibeeApiMerchantSubscriptionNewPaymentReq UnibeeApiMerchantSubscriptionNewPaymentReq) SubscriptionPaymentSubscriptionPaymentNewPostRequest {
	r.unibeeApiMerchantSubscriptionNewPaymentReq = &unibeeApiMerchantSubscriptionNewPaymentReq
	return r
}

func (r SubscriptionPaymentSubscriptionPaymentNewPostRequest) Execute() (*MerchantSubscriptionPaymentNewPost200Response, *http.Response, error) {
	return r.ApiService.SubscriptionPaymentNewPostExecute(r)
}

/*
SubscriptionPaymentNewPost New Subscription Payment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionPaymentSubscriptionPaymentNewPostRequest
*/
func (a *SubscriptionPaymentService) SubscriptionPaymentNewPost(ctx context.Context) SubscriptionPaymentSubscriptionPaymentNewPostRequest {
	return SubscriptionPaymentSubscriptionPaymentNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionPaymentNewPost200Response
func (a *SubscriptionPaymentService) SubscriptionPaymentNewPostExecute(r SubscriptionPaymentSubscriptionPaymentNewPostRequest) (*MerchantSubscriptionPaymentNewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionPaymentNewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPaymentService.SubscriptionPaymentNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/payment/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionNewPaymentReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionNewPaymentReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionNewPaymentReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
