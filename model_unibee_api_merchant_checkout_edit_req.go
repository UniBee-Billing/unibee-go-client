/*
OpenAPI UniBee

UniBee Api Server

API version: daily,buildtime:202510192014
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unibee

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnibeeApiMerchantCheckoutEditReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeApiMerchantCheckoutEditReq{}

// UnibeeApiMerchantCheckoutEditReq struct for UnibeeApiMerchantCheckoutEditReq
type UnibeeApiMerchantCheckoutEditReq struct {
	// checkout id
	CheckoutId int64 `json:"checkoutId"`
	// checkout config data
	Data *map[string]interface{} `json:"data,omitempty"`
	// description
	Description *string `json:"description,omitempty"`
	// name
	Name *string `json:"name,omitempty"`
	// checkout staging config data
	StagingData *map[string]interface{} `json:"stagingData,omitempty"`
}

type _UnibeeApiMerchantCheckoutEditReq UnibeeApiMerchantCheckoutEditReq

// NewUnibeeApiMerchantCheckoutEditReq instantiates a new UnibeeApiMerchantCheckoutEditReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeApiMerchantCheckoutEditReq(checkoutId int64) *UnibeeApiMerchantCheckoutEditReq {
	this := UnibeeApiMerchantCheckoutEditReq{}
	this.CheckoutId = checkoutId
	return &this
}

// NewUnibeeApiMerchantCheckoutEditReqWithDefaults instantiates a new UnibeeApiMerchantCheckoutEditReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeApiMerchantCheckoutEditReqWithDefaults() *UnibeeApiMerchantCheckoutEditReq {
	this := UnibeeApiMerchantCheckoutEditReq{}
	return &this
}

// GetCheckoutId returns the CheckoutId field value
func (o *UnibeeApiMerchantCheckoutEditReq) GetCheckoutId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CheckoutId
}

// GetCheckoutIdOk returns a tuple with the CheckoutId field value
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) GetCheckoutIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckoutId, true
}

// SetCheckoutId sets field value
func (o *UnibeeApiMerchantCheckoutEditReq) SetCheckoutId(v int64) {
	o.CheckoutId = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UnibeeApiMerchantCheckoutEditReq) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *UnibeeApiMerchantCheckoutEditReq) SetData(v map[string]interface{}) {
	o.Data = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnibeeApiMerchantCheckoutEditReq) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnibeeApiMerchantCheckoutEditReq) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UnibeeApiMerchantCheckoutEditReq) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UnibeeApiMerchantCheckoutEditReq) SetName(v string) {
	o.Name = &v
}

// GetStagingData returns the StagingData field value if set, zero value otherwise.
func (o *UnibeeApiMerchantCheckoutEditReq) GetStagingData() map[string]interface{} {
	if o == nil || IsNil(o.StagingData) {
		var ret map[string]interface{}
		return ret
	}
	return *o.StagingData
}

// GetStagingDataOk returns a tuple with the StagingData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) GetStagingDataOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.StagingData) {
		return nil, false
	}
	return o.StagingData, true
}

// HasStagingData returns a boolean if a field has been set.
func (o *UnibeeApiMerchantCheckoutEditReq) HasStagingData() bool {
	if o != nil && !IsNil(o.StagingData) {
		return true
	}

	return false
}

// SetStagingData gets a reference to the given map[string]interface{} and assigns it to the StagingData field.
func (o *UnibeeApiMerchantCheckoutEditReq) SetStagingData(v map[string]interface{}) {
	o.StagingData = &v
}

func (o UnibeeApiMerchantCheckoutEditReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeApiMerchantCheckoutEditReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checkoutId"] = o.CheckoutId
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StagingData) {
		toSerialize["stagingData"] = o.StagingData
	}
	return toSerialize, nil
}

func (o *UnibeeApiMerchantCheckoutEditReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"checkoutId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnibeeApiMerchantCheckoutEditReq := _UnibeeApiMerchantCheckoutEditReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varUnibeeApiMerchantCheckoutEditReq)

	if err != nil {
		return err
	}

	*o = UnibeeApiMerchantCheckoutEditReq(varUnibeeApiMerchantCheckoutEditReq)

	return err
}

type NullableUnibeeApiMerchantCheckoutEditReq struct {
	value *UnibeeApiMerchantCheckoutEditReq
	isSet bool
}

func (v NullableUnibeeApiMerchantCheckoutEditReq) Get() *UnibeeApiMerchantCheckoutEditReq {
	return v.value
}

func (v *NullableUnibeeApiMerchantCheckoutEditReq) Set(val *UnibeeApiMerchantCheckoutEditReq) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeApiMerchantCheckoutEditReq) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeApiMerchantCheckoutEditReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeApiMerchantCheckoutEditReq(val *UnibeeApiMerchantCheckoutEditReq) *NullableUnibeeApiMerchantCheckoutEditReq {
	return &NullableUnibeeApiMerchantCheckoutEditReq{value: val, isSet: true}
}

func (v NullableUnibeeApiMerchantCheckoutEditReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeApiMerchantCheckoutEditReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


